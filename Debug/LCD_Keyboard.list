
LCD_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002808  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002914  08002914  00012914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800297c  0800297c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800297c  0800297c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800297c  0800297c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800297c  0800297c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002980  08002980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  080029f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080029f4  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000343a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001225  00000000  00000000  000234d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  000246f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  00024b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cb5  00000000  00000000  00024f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005acf  00000000  00000000  0003bbc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080399  00000000  00000000  00041694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c1a2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013a8  00000000  00000000  000c1a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080028fc 	.word	0x080028fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080028fc 	.word	0x080028fc

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <keypad_init>:
#include "stm32f1xx_hal.h"
#include "keypad.h"

void keypad_init(void){
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	4b51      	ldr	r3, [pc, #324]	; (800065c <keypad_init+0x14c>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a50      	ldr	r2, [pc, #320]	; (800065c <keypad_init+0x14c>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b4e      	ldr	r3, [pc, #312]	; (800065c <keypad_init+0x14c>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0304 	and.w	r3, r3, #4
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800052e:	4b4b      	ldr	r3, [pc, #300]	; (800065c <keypad_init+0x14c>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4a4a      	ldr	r2, [pc, #296]	; (800065c <keypad_init+0x14c>)
 8000534:	f043 0308 	orr.w	r3, r3, #8
 8000538:	6193      	str	r3, [r2, #24]
 800053a:	4b48      	ldr	r3, [pc, #288]	; (800065c <keypad_init+0x14c>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	f003 0308 	and.w	r3, r3, #8
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
	
	
  GPIO_InitStruct.Pin 	= ROW1_PIN;
 8000546:	2380      	movs	r3, #128	; 0x80
 8000548:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 800054a:	2301      	movs	r3, #1
 800054c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2302      	movs	r3, #2
 8000554:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ROW1_PORT, &GPIO_InitStruct);
 8000556:	f107 0308 	add.w	r3, r7, #8
 800055a:	4619      	mov	r1, r3
 800055c:	4840      	ldr	r0, [pc, #256]	; (8000660 <keypad_init+0x150>)
 800055e:	f000 ff85 	bl	800146c <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW2_PIN;
 8000562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000566:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2302      	movs	r3, #2
 8000572:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ROW2_PORT, &GPIO_InitStruct);
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	4619      	mov	r1, r3
 800057a:	4839      	ldr	r0, [pc, #228]	; (8000660 <keypad_init+0x150>)
 800057c:	f000 ff76 	bl	800146c <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW3_PIN;
 8000580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000584:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2302      	movs	r3, #2
 8000590:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ROW3_PORT, &GPIO_InitStruct);
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	4619      	mov	r1, r3
 8000598:	4831      	ldr	r0, [pc, #196]	; (8000660 <keypad_init+0x150>)
 800059a:	f000 ff67 	bl	800146c <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW4_PIN;
 800059e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2302      	movs	r3, #2
 80005ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ROW4_PORT, &GPIO_InitStruct);
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	4619      	mov	r1, r3
 80005b6:	482a      	ldr	r0, [pc, #168]	; (8000660 <keypad_init+0x150>)
 80005b8:	f000 ff58 	bl	800146c <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2180      	movs	r1, #128	; 0x80
 80005c0:	4827      	ldr	r0, [pc, #156]	; (8000660 <keypad_init+0x150>)
 80005c2:	f001 f8ee 	bl	80017a2 <HAL_GPIO_WritePin>
	
  HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005cc:	4824      	ldr	r0, [pc, #144]	; (8000660 <keypad_init+0x150>)
 80005ce:	f001 f8e8 	bl	80017a2 <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d8:	4821      	ldr	r0, [pc, #132]	; (8000660 <keypad_init+0x150>)
 80005da:	f001 f8e2 	bl	80017a2 <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e4:	481e      	ldr	r0, [pc, #120]	; (8000660 <keypad_init+0x150>)
 80005e6:	f001 f8dc 	bl	80017a2 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin 	= COL1_PIN;
 80005ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COL1_PORT, &GPIO_InitStruct);
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	4619      	mov	r1, r3
 80005fe:	4818      	ldr	r0, [pc, #96]	; (8000660 <keypad_init+0x150>)
 8000600:	f000 ff34 	bl	800146c <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL2_PIN;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 800060e:	2301      	movs	r3, #1
 8000610:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COL2_PORT, &GPIO_InitStruct);
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	4619      	mov	r1, r3
 8000618:	4811      	ldr	r0, [pc, #68]	; (8000660 <keypad_init+0x150>)
 800061a:	f000 ff27 	bl	800146c <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL3_PIN;
 800061e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000622:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 8000628:	2301      	movs	r3, #1
 800062a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COL3_PORT, &GPIO_InitStruct);
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	4619      	mov	r1, r3
 8000632:	480b      	ldr	r0, [pc, #44]	; (8000660 <keypad_init+0x150>)
 8000634:	f000 ff1a 	bl	800146c <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL4_PIN;
 8000638:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800063c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 8000642:	2301      	movs	r3, #1
 8000644:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COL4_PORT, &GPIO_InitStruct);
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	4619      	mov	r1, r3
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <keypad_init+0x150>)
 800064e:	f000 ff0d 	bl	800146c <HAL_GPIO_Init>
		
}
 8000652:	bf00      	nop
 8000654:	3718      	adds	r7, #24
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000
 8000660:	40010c00 	.word	0x40010c00

08000664 <keypad_read>:

char keypad_read(void){
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b087      	sub	sp, #28
 8000668:	af00      	add	r7, sp, #0
	char letras[4][4]={	{'1','2','3','A'},
 800066a:	4b9e      	ldr	r3, [pc, #632]	; (80008e4 <keypad_read+0x280>)
 800066c:	463c      	mov	r4, r7
 800066e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
										{'4','5','6','B'},
										{'7','8','9','C'},
										{'*','0','#','D'}};
	int  i=0;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
	char valor=0;
 8000678:	2300      	movs	r3, #0
 800067a:	74fb      	strb	r3, [r7, #19]


	for(i=0;i<4;i++){
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	e126      	b.n	80008d0 <keypad_read+0x26c>
		if(i==0){
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d145      	bne.n	8000714 <keypad_read+0xb0>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,  GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068e:	4896      	ldr	r0, [pc, #600]	; (80008e8 <keypad_read+0x284>)
 8000690:	f001 f887 	bl	80017a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,	GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069a:	4893      	ldr	r0, [pc, #588]	; (80008e8 <keypad_read+0x284>)
 800069c:	f001 f881 	bl	80017a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a6:	4890      	ldr	r0, [pc, #576]	; (80008e8 <keypad_read+0x284>)
 80006a8:	f001 f87b 	bl	80017a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	488d      	ldr	r0, [pc, #564]	; (80008e8 <keypad_read+0x284>)
 80006b2:	f001 f876 	bl	80017a2 <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 80006b6:	200a      	movs	r0, #10
 80006b8:	f000 fdd0 	bl	800125c <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[0][0];}	//1
 80006bc:	e001      	b.n	80006c2 <keypad_read+0x5e>
 80006be:	783b      	ldrb	r3, [r7, #0]
 80006c0:	74fb      	strb	r3, [r7, #19]
 80006c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c6:	4888      	ldr	r0, [pc, #544]	; (80008e8 <keypad_read+0x284>)
 80006c8:	f001 f854 	bl	8001774 <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d0f5      	beq.n	80006be <keypad_read+0x5a>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[0][1];}	//2
 80006d2:	e001      	b.n	80006d8 <keypad_read+0x74>
 80006d4:	787b      	ldrb	r3, [r7, #1]
 80006d6:	74fb      	strb	r3, [r7, #19]
 80006d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006dc:	4882      	ldr	r0, [pc, #520]	; (80008e8 <keypad_read+0x284>)
 80006de:	f001 f849 	bl	8001774 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0f5      	beq.n	80006d4 <keypad_read+0x70>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[0][2];}	//3
 80006e8:	e001      	b.n	80006ee <keypad_read+0x8a>
 80006ea:	78bb      	ldrb	r3, [r7, #2]
 80006ec:	74fb      	strb	r3, [r7, #19]
 80006ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f2:	487d      	ldr	r0, [pc, #500]	; (80008e8 <keypad_read+0x284>)
 80006f4:	f001 f83e 	bl	8001774 <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0f5      	beq.n	80006ea <keypad_read+0x86>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[0][3];}	//A
 80006fe:	e001      	b.n	8000704 <keypad_read+0xa0>
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	74fb      	strb	r3, [r7, #19]
 8000704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000708:	4877      	ldr	r0, [pc, #476]	; (80008e8 <keypad_read+0x284>)
 800070a:	f001 f833 	bl	8001774 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0f5      	beq.n	8000700 <keypad_read+0x9c>
		}

		if(i==1){
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d145      	bne.n	80007a6 <keypad_read+0x142>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	4872      	ldr	r0, [pc, #456]	; (80008e8 <keypad_read+0x284>)
 8000720:	f001 f83f 	bl	80017a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,	GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072a:	486f      	ldr	r0, [pc, #444]	; (80008e8 <keypad_read+0x284>)
 800072c:	f001 f839 	bl	80017a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000736:	486c      	ldr	r0, [pc, #432]	; (80008e8 <keypad_read+0x284>)
 8000738:	f001 f833 	bl	80017a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,  GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000742:	4869      	ldr	r0, [pc, #420]	; (80008e8 <keypad_read+0x284>)
 8000744:	f001 f82d 	bl	80017a2 <HAL_GPIO_WritePin>

			HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f000 fd87 	bl	800125c <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[1][0];}	//4
 800074e:	e001      	b.n	8000754 <keypad_read+0xf0>
 8000750:	793b      	ldrb	r3, [r7, #4]
 8000752:	74fb      	strb	r3, [r7, #19]
 8000754:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000758:	4863      	ldr	r0, [pc, #396]	; (80008e8 <keypad_read+0x284>)
 800075a:	f001 f80b 	bl	8001774 <HAL_GPIO_ReadPin>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d0f5      	beq.n	8000750 <keypad_read+0xec>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[1][1];}	//5
 8000764:	e001      	b.n	800076a <keypad_read+0x106>
 8000766:	797b      	ldrb	r3, [r7, #5]
 8000768:	74fb      	strb	r3, [r7, #19]
 800076a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800076e:	485e      	ldr	r0, [pc, #376]	; (80008e8 <keypad_read+0x284>)
 8000770:	f001 f800 	bl	8001774 <HAL_GPIO_ReadPin>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0f5      	beq.n	8000766 <keypad_read+0x102>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[1][2];}	//6
 800077a:	e001      	b.n	8000780 <keypad_read+0x11c>
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	74fb      	strb	r3, [r7, #19]
 8000780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000784:	4858      	ldr	r0, [pc, #352]	; (80008e8 <keypad_read+0x284>)
 8000786:	f000 fff5 	bl	8001774 <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0f5      	beq.n	800077c <keypad_read+0x118>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[1][3];}	//B
 8000790:	e001      	b.n	8000796 <keypad_read+0x132>
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	74fb      	strb	r3, [r7, #19]
 8000796:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079a:	4853      	ldr	r0, [pc, #332]	; (80008e8 <keypad_read+0x284>)
 800079c:	f000 ffea 	bl	8001774 <HAL_GPIO_ReadPin>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0f5      	beq.n	8000792 <keypad_read+0x12e>
		}

		if(i==2){
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d145      	bne.n	8000838 <keypad_read+0x1d4>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	484d      	ldr	r0, [pc, #308]	; (80008e8 <keypad_read+0x284>)
 80007b2:	f000 fff6 	bl	80017a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,	GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007bc:	484a      	ldr	r0, [pc, #296]	; (80008e8 <keypad_read+0x284>)
 80007be:	f000 fff0 	bl	80017a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c8:	4847      	ldr	r0, [pc, #284]	; (80008e8 <keypad_read+0x284>)
 80007ca:	f000 ffea 	bl	80017a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,  GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d4:	4844      	ldr	r0, [pc, #272]	; (80008e8 <keypad_read+0x284>)
 80007d6:	f000 ffe4 	bl	80017a2 <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 80007da:	200a      	movs	r0, #10
 80007dc:	f000 fd3e 	bl	800125c <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[2][0];}	//7
 80007e0:	e001      	b.n	80007e6 <keypad_read+0x182>
 80007e2:	7a3b      	ldrb	r3, [r7, #8]
 80007e4:	74fb      	strb	r3, [r7, #19]
 80007e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ea:	483f      	ldr	r0, [pc, #252]	; (80008e8 <keypad_read+0x284>)
 80007ec:	f000 ffc2 	bl	8001774 <HAL_GPIO_ReadPin>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0f5      	beq.n	80007e2 <keypad_read+0x17e>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[2][1];}	//8
 80007f6:	e001      	b.n	80007fc <keypad_read+0x198>
 80007f8:	7a7b      	ldrb	r3, [r7, #9]
 80007fa:	74fb      	strb	r3, [r7, #19]
 80007fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000800:	4839      	ldr	r0, [pc, #228]	; (80008e8 <keypad_read+0x284>)
 8000802:	f000 ffb7 	bl	8001774 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d0f5      	beq.n	80007f8 <keypad_read+0x194>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[2][2];}	//9
 800080c:	e001      	b.n	8000812 <keypad_read+0x1ae>
 800080e:	7abb      	ldrb	r3, [r7, #10]
 8000810:	74fb      	strb	r3, [r7, #19]
 8000812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000816:	4834      	ldr	r0, [pc, #208]	; (80008e8 <keypad_read+0x284>)
 8000818:	f000 ffac 	bl	8001774 <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d0f5      	beq.n	800080e <keypad_read+0x1aa>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[2][3];}	//C
 8000822:	e001      	b.n	8000828 <keypad_read+0x1c4>
 8000824:	7afb      	ldrb	r3, [r7, #11]
 8000826:	74fb      	strb	r3, [r7, #19]
 8000828:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800082c:	482e      	ldr	r0, [pc, #184]	; (80008e8 <keypad_read+0x284>)
 800082e:	f000 ffa1 	bl	8001774 <HAL_GPIO_ReadPin>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d0f5      	beq.n	8000824 <keypad_read+0x1c0>
		}

		if(i==3){
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	2b03      	cmp	r3, #3
 800083c:	d145      	bne.n	80008ca <keypad_read+0x266>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	4829      	ldr	r0, [pc, #164]	; (80008e8 <keypad_read+0x284>)
 8000844:	f000 ffad 	bl	80017a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,	GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084e:	4826      	ldr	r0, [pc, #152]	; (80008e8 <keypad_read+0x284>)
 8000850:	f000 ffa7 	bl	80017a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,  GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800085a:	4823      	ldr	r0, [pc, #140]	; (80008e8 <keypad_read+0x284>)
 800085c:	f000 ffa1 	bl	80017a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000866:	4820      	ldr	r0, [pc, #128]	; (80008e8 <keypad_read+0x284>)
 8000868:	f000 ff9b 	bl	80017a2 <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 800086c:	200a      	movs	r0, #10
 800086e:	f000 fcf5 	bl	800125c <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[3][0];}	//*
 8000872:	e001      	b.n	8000878 <keypad_read+0x214>
 8000874:	7b3b      	ldrb	r3, [r7, #12]
 8000876:	74fb      	strb	r3, [r7, #19]
 8000878:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087c:	481a      	ldr	r0, [pc, #104]	; (80008e8 <keypad_read+0x284>)
 800087e:	f000 ff79 	bl	8001774 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0f5      	beq.n	8000874 <keypad_read+0x210>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[3][1];}	//0
 8000888:	e001      	b.n	800088e <keypad_read+0x22a>
 800088a:	7b7b      	ldrb	r3, [r7, #13]
 800088c:	74fb      	strb	r3, [r7, #19]
 800088e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000892:	4815      	ldr	r0, [pc, #84]	; (80008e8 <keypad_read+0x284>)
 8000894:	f000 ff6e 	bl	8001774 <HAL_GPIO_ReadPin>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d0f5      	beq.n	800088a <keypad_read+0x226>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[3][2];}	//+
 800089e:	e001      	b.n	80008a4 <keypad_read+0x240>
 80008a0:	7bbb      	ldrb	r3, [r7, #14]
 80008a2:	74fb      	strb	r3, [r7, #19]
 80008a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a8:	480f      	ldr	r0, [pc, #60]	; (80008e8 <keypad_read+0x284>)
 80008aa:	f000 ff63 	bl	8001774 <HAL_GPIO_ReadPin>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0f5      	beq.n	80008a0 <keypad_read+0x23c>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[3][3];}	//D
 80008b4:	e001      	b.n	80008ba <keypad_read+0x256>
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	74fb      	strb	r3, [r7, #19]
 80008ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008be:	480a      	ldr	r0, [pc, #40]	; (80008e8 <keypad_read+0x284>)
 80008c0:	f000 ff58 	bl	8001774 <HAL_GPIO_ReadPin>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0f5      	beq.n	80008b6 <keypad_read+0x252>
	for(i=0;i<4;i++){
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3301      	adds	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	f77f aed5 	ble.w	8000682 <keypad_read+0x1e>
		}
	}
	
	return valor;
 80008d8:	7cfb      	ldrb	r3, [r7, #19]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	371c      	adds	r7, #28
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd90      	pop	{r4, r7, pc}
 80008e2:	bf00      	nop
 80008e4:	08002914 	.word	0x08002914
 80008e8:	40010c00 	.word	0x40010c00

080008ec <lcd_init>:

		return ch;
}
*/
void lcd_init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b90      	ldr	r3, [pc, #576]	; (8000b34 <lcd_init+0x248>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	4a8f      	ldr	r2, [pc, #572]	; (8000b34 <lcd_init+0x248>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6193      	str	r3, [r2, #24]
 80008fe:	4b8d      	ldr	r3, [pc, #564]	; (8000b34 <lcd_init+0x248>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	4b8a      	ldr	r3, [pc, #552]	; (8000b34 <lcd_init+0x248>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a89      	ldr	r2, [pc, #548]	; (8000b34 <lcd_init+0x248>)
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	6193      	str	r3, [r2, #24]
 8000916:	4b87      	ldr	r3, [pc, #540]	; (8000b34 <lcd_init+0x248>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b84      	ldr	r3, [pc, #528]	; (8000b34 <lcd_init+0x248>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	4a83      	ldr	r2, [pc, #524]	; (8000b34 <lcd_init+0x248>)
 8000928:	f043 0310 	orr.w	r3, r3, #16
 800092c:	6193      	str	r3, [r2, #24]
 800092e:	4b81      	ldr	r3, [pc, #516]	; (8000b34 <lcd_init+0x248>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	f003 0310 	and.w	r3, r3, #16
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin 	= LCDRS_PIN;
 800093a:	2320      	movs	r3, #32
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCDRS_PORT, &GPIO_InitStruct);
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	4619      	mov	r1, r3
 8000950:	4879      	ldr	r0, [pc, #484]	; (8000b38 <lcd_init+0x24c>)
 8000952:	f000 fd8b 	bl	800146c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCDE_PIN;
 8000956:	2310      	movs	r3, #16
 8000958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCDE_PORT, &GPIO_InitStruct);
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	4619      	mov	r1, r3
 800096c:	4872      	ldr	r0, [pc, #456]	; (8000b38 <lcd_init+0x24c>)
 800096e:	f000 fd7d 	bl	800146c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD4_PIN;
 8000972:	2308      	movs	r3, #8
 8000974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD4_PORT, &GPIO_InitStruct);
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4619      	mov	r1, r3
 8000988:	486c      	ldr	r0, [pc, #432]	; (8000b3c <lcd_init+0x250>)
 800098a:	f000 fd6f 	bl	800146c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD5_PIN;
 800098e:	2310      	movs	r3, #16
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD5_PORT, &GPIO_InitStruct);
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4619      	mov	r1, r3
 80009a4:	4865      	ldr	r0, [pc, #404]	; (8000b3c <lcd_init+0x250>)
 80009a6:	f000 fd61 	bl	800146c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD6_PIN;
 80009aa:	2320      	movs	r3, #32
 80009ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD6_PORT, &GPIO_InitStruct);
 80009ba:	f107 0310 	add.w	r3, r7, #16
 80009be:	4619      	mov	r1, r3
 80009c0:	485e      	ldr	r0, [pc, #376]	; (8000b3c <lcd_init+0x250>)
 80009c2:	f000 fd53 	bl	800146c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD7_PIN;
 80009c6:	2340      	movs	r3, #64	; 0x40
 80009c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD7_PORT, &GPIO_InitStruct);
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	4619      	mov	r1, r3
 80009dc:	4857      	ldr	r0, [pc, #348]	; (8000b3c <lcd_init+0x250>)
 80009de:	f000 fd45 	bl	800146c <HAL_GPIO_Init>

	HAL_Delay(15);
 80009e2:	200f      	movs	r0, #15
 80009e4:	f000 fc3a 	bl	800125c <HAL_Delay>
	LCD7_OFF; LCD6_OFF; LCD5_OFF; LCD4_OFF;
 80009e8:	2200      	movs	r2, #0
 80009ea:	2140      	movs	r1, #64	; 0x40
 80009ec:	4853      	ldr	r0, [pc, #332]	; (8000b3c <lcd_init+0x250>)
 80009ee:	f000 fed8 	bl	80017a2 <HAL_GPIO_WritePin>
 80009f2:	2200      	movs	r2, #0
 80009f4:	2120      	movs	r1, #32
 80009f6:	4851      	ldr	r0, [pc, #324]	; (8000b3c <lcd_init+0x250>)
 80009f8:	f000 fed3 	bl	80017a2 <HAL_GPIO_WritePin>
 80009fc:	2200      	movs	r2, #0
 80009fe:	2110      	movs	r1, #16
 8000a00:	484e      	ldr	r0, [pc, #312]	; (8000b3c <lcd_init+0x250>)
 8000a02:	f000 fece 	bl	80017a2 <HAL_GPIO_WritePin>
 8000a06:	2200      	movs	r2, #0
 8000a08:	2108      	movs	r1, #8
 8000a0a:	484c      	ldr	r0, [pc, #304]	; (8000b3c <lcd_init+0x250>)
 8000a0c:	f000 fec9 	bl	80017a2 <HAL_GPIO_WritePin>
	LCDE_OFF;
 8000a10:	2200      	movs	r2, #0
 8000a12:	2110      	movs	r1, #16
 8000a14:	4848      	ldr	r0, [pc, #288]	; (8000b38 <lcd_init+0x24c>)
 8000a16:	f000 fec4 	bl	80017a2 <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	4846      	ldr	r0, [pc, #280]	; (8000b38 <lcd_init+0x24c>)
 8000a20:	f000 febf 	bl	80017a2 <HAL_GPIO_WritePin>
	//---------one------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_ON;
 8000a24:	2200      	movs	r2, #0
 8000a26:	2140      	movs	r1, #64	; 0x40
 8000a28:	4844      	ldr	r0, [pc, #272]	; (8000b3c <lcd_init+0x250>)
 8000a2a:	f000 feba 	bl	80017a2 <HAL_GPIO_WritePin>
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2120      	movs	r1, #32
 8000a32:	4842      	ldr	r0, [pc, #264]	; (8000b3c <lcd_init+0x250>)
 8000a34:	f000 feb5 	bl	80017a2 <HAL_GPIO_WritePin>
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	483f      	ldr	r0, [pc, #252]	; (8000b3c <lcd_init+0x250>)
 8000a3e:	f000 feb0 	bl	80017a2 <HAL_GPIO_WritePin>
 8000a42:	2201      	movs	r2, #1
 8000a44:	2108      	movs	r1, #8
 8000a46:	483d      	ldr	r0, [pc, #244]	; (8000b3c <lcd_init+0x250>)
 8000a48:	f000 feab 	bl	80017a2 <HAL_GPIO_WritePin>
	LCDE_ON;
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2110      	movs	r1, #16
 8000a50:	4839      	ldr	r0, [pc, #228]	; (8000b38 <lcd_init+0x24c>)
 8000a52:	f000 fea6 	bl	80017a2 <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8000a56:	2200      	movs	r2, #0
 8000a58:	2120      	movs	r1, #32
 8000a5a:	4837      	ldr	r0, [pc, #220]	; (8000b38 <lcd_init+0x24c>)
 8000a5c:	f000 fea1 	bl	80017a2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000a60:	200a      	movs	r0, #10
 8000a62:	f000 fbfb 	bl	800125c <HAL_Delay>
	LCDE_OFF;
 8000a66:	2200      	movs	r2, #0
 8000a68:	2110      	movs	r1, #16
 8000a6a:	4833      	ldr	r0, [pc, #204]	; (8000b38 <lcd_init+0x24c>)
 8000a6c:	f000 fe99 	bl	80017a2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000a70:	200a      	movs	r0, #10
 8000a72:	f000 fbf3 	bl	800125c <HAL_Delay>
	//-----------two-----------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_ON;
 8000a76:	2200      	movs	r2, #0
 8000a78:	2140      	movs	r1, #64	; 0x40
 8000a7a:	4830      	ldr	r0, [pc, #192]	; (8000b3c <lcd_init+0x250>)
 8000a7c:	f000 fe91 	bl	80017a2 <HAL_GPIO_WritePin>
 8000a80:	2200      	movs	r2, #0
 8000a82:	2120      	movs	r1, #32
 8000a84:	482d      	ldr	r0, [pc, #180]	; (8000b3c <lcd_init+0x250>)
 8000a86:	f000 fe8c 	bl	80017a2 <HAL_GPIO_WritePin>
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2110      	movs	r1, #16
 8000a8e:	482b      	ldr	r0, [pc, #172]	; (8000b3c <lcd_init+0x250>)
 8000a90:	f000 fe87 	bl	80017a2 <HAL_GPIO_WritePin>
 8000a94:	2201      	movs	r2, #1
 8000a96:	2108      	movs	r1, #8
 8000a98:	4828      	ldr	r0, [pc, #160]	; (8000b3c <lcd_init+0x250>)
 8000a9a:	f000 fe82 	bl	80017a2 <HAL_GPIO_WritePin>
	LCDE_ON;
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	4825      	ldr	r0, [pc, #148]	; (8000b38 <lcd_init+0x24c>)
 8000aa4:	f000 fe7d 	bl	80017a2 <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2120      	movs	r1, #32
 8000aac:	4822      	ldr	r0, [pc, #136]	; (8000b38 <lcd_init+0x24c>)
 8000aae:	f000 fe78 	bl	80017a2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ab2:	200a      	movs	r0, #10
 8000ab4:	f000 fbd2 	bl	800125c <HAL_Delay>
	LCDE_OFF;
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2110      	movs	r1, #16
 8000abc:	481e      	ldr	r0, [pc, #120]	; (8000b38 <lcd_init+0x24c>)
 8000abe:	f000 fe70 	bl	80017a2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ac2:	200a      	movs	r0, #10
 8000ac4:	f000 fbca 	bl	800125c <HAL_Delay>
	//-------three-------------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_OFF;
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2140      	movs	r1, #64	; 0x40
 8000acc:	481b      	ldr	r0, [pc, #108]	; (8000b3c <lcd_init+0x250>)
 8000ace:	f000 fe68 	bl	80017a2 <HAL_GPIO_WritePin>
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	4819      	ldr	r0, [pc, #100]	; (8000b3c <lcd_init+0x250>)
 8000ad8:	f000 fe63 	bl	80017a2 <HAL_GPIO_WritePin>
 8000adc:	2201      	movs	r2, #1
 8000ade:	2110      	movs	r1, #16
 8000ae0:	4816      	ldr	r0, [pc, #88]	; (8000b3c <lcd_init+0x250>)
 8000ae2:	f000 fe5e 	bl	80017a2 <HAL_GPIO_WritePin>
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2108      	movs	r1, #8
 8000aea:	4814      	ldr	r0, [pc, #80]	; (8000b3c <lcd_init+0x250>)
 8000aec:	f000 fe59 	bl	80017a2 <HAL_GPIO_WritePin>
	LCDE_ON;
 8000af0:	2201      	movs	r2, #1
 8000af2:	2110      	movs	r1, #16
 8000af4:	4810      	ldr	r0, [pc, #64]	; (8000b38 <lcd_init+0x24c>)
 8000af6:	f000 fe54 	bl	80017a2 <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8000afa:	2200      	movs	r2, #0
 8000afc:	2120      	movs	r1, #32
 8000afe:	480e      	ldr	r0, [pc, #56]	; (8000b38 <lcd_init+0x24c>)
 8000b00:	f000 fe4f 	bl	80017a2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b04:	200a      	movs	r0, #10
 8000b06:	f000 fba9 	bl	800125c <HAL_Delay>
	LCDE_OFF;
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2110      	movs	r1, #16
 8000b0e:	480a      	ldr	r0, [pc, #40]	; (8000b38 <lcd_init+0x24c>)
 8000b10:	f000 fe47 	bl	80017a2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b14:	200a      	movs	r0, #10
 8000b16:	f000 fba1 	bl	800125c <HAL_Delay>
	//--------4 bit--dual line--5x8 dots---------------
	lcd_command(SETLCD_4BITS_2LINE);
 8000b1a:	2028      	movs	r0, #40	; 0x28
 8000b1c:	f000 f8c2 	bl	8000ca4 <lcd_command>
	//-----increment address, invisible cursor shift------
	lcd_command(DISPLAY_ON_D_OFF_CB);
 8000b20:	200c      	movs	r0, #12
 8000b22:	f000 f8bf 	bl	8000ca4 <lcd_command>
	//-----Clear display
	lcd_clear();
 8000b26:	f000 f9a5 	bl	8000e74 <lcd_clear>
}
 8000b2a:	bf00      	nop
 8000b2c:	3720      	adds	r7, #32
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	40010c00 	.word	0x40010c00

08000b40 <lcd_putc>:

void lcd_putc(unsigned char ch){		//Sends Char to LCD
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]

	LCDRS_ON;
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	4853      	ldr	r0, [pc, #332]	; (8000c9c <lcd_putc+0x15c>)
 8000b50:	f000 fe27 	bl	80017a2 <HAL_GPIO_WritePin>

  if ( ch & 0x10 ) {
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 0310 	and.w	r3, r3, #16
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d005      	beq.n	8000b6a <lcd_putc+0x2a>
		LCD4_ON;
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2108      	movs	r1, #8
 8000b62:	484f      	ldr	r0, [pc, #316]	; (8000ca0 <lcd_putc+0x160>)
 8000b64:	f000 fe1d 	bl	80017a2 <HAL_GPIO_WritePin>
 8000b68:	e004      	b.n	8000b74 <lcd_putc+0x34>
	} else {
		LCD4_OFF;
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2108      	movs	r1, #8
 8000b6e:	484c      	ldr	r0, [pc, #304]	; (8000ca0 <lcd_putc+0x160>)
 8000b70:	f000 fe17 	bl	80017a2 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x20 ) {
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 0320 	and.w	r3, r3, #32
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d005      	beq.n	8000b8a <lcd_putc+0x4a>
		LCD5_ON;
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2110      	movs	r1, #16
 8000b82:	4847      	ldr	r0, [pc, #284]	; (8000ca0 <lcd_putc+0x160>)
 8000b84:	f000 fe0d 	bl	80017a2 <HAL_GPIO_WritePin>
 8000b88:	e004      	b.n	8000b94 <lcd_putc+0x54>
	} else {
    LCD5_OFF;
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2110      	movs	r1, #16
 8000b8e:	4844      	ldr	r0, [pc, #272]	; (8000ca0 <lcd_putc+0x160>)
 8000b90:	f000 fe07 	bl	80017a2 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x40 ) {
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d005      	beq.n	8000baa <lcd_putc+0x6a>
		LCD6_ON;
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	483f      	ldr	r0, [pc, #252]	; (8000ca0 <lcd_putc+0x160>)
 8000ba4:	f000 fdfd 	bl	80017a2 <HAL_GPIO_WritePin>
 8000ba8:	e004      	b.n	8000bb4 <lcd_putc+0x74>
	} else {
		LCD6_OFF;
 8000baa:	2200      	movs	r2, #0
 8000bac:	2120      	movs	r1, #32
 8000bae:	483c      	ldr	r0, [pc, #240]	; (8000ca0 <lcd_putc+0x160>)
 8000bb0:	f000 fdf7 	bl	80017a2 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x80 ) {
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	da05      	bge.n	8000bc8 <lcd_putc+0x88>
		LCD7_ON;
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	4837      	ldr	r0, [pc, #220]	; (8000ca0 <lcd_putc+0x160>)
 8000bc2:	f000 fdee 	bl	80017a2 <HAL_GPIO_WritePin>
 8000bc6:	e004      	b.n	8000bd2 <lcd_putc+0x92>
	} else {
		LCD7_OFF;
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2140      	movs	r1, #64	; 0x40
 8000bcc:	4834      	ldr	r0, [pc, #208]	; (8000ca0 <lcd_putc+0x160>)
 8000bce:	f000 fde8 	bl	80017a2 <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2110      	movs	r1, #16
 8000bd6:	4831      	ldr	r0, [pc, #196]	; (8000c9c <lcd_putc+0x15c>)
 8000bd8:	f000 fde3 	bl	80017a2 <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f000 fb3d 	bl	800125c <HAL_Delay>
	LCDE_OFF;
 8000be2:	2200      	movs	r2, #0
 8000be4:	2110      	movs	r1, #16
 8000be6:	482d      	ldr	r0, [pc, #180]	; (8000c9c <lcd_putc+0x15c>)
 8000be8:	f000 fddb 	bl	80017a2 <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 8000bec:	2001      	movs	r0, #1
 8000bee:	f000 fb35 	bl	800125c <HAL_Delay>

	if ( ch & 0x01 ) {
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d005      	beq.n	8000c08 <lcd_putc+0xc8>
		LCD4_ON;
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2108      	movs	r1, #8
 8000c00:	4827      	ldr	r0, [pc, #156]	; (8000ca0 <lcd_putc+0x160>)
 8000c02:	f000 fdce 	bl	80017a2 <HAL_GPIO_WritePin>
 8000c06:	e004      	b.n	8000c12 <lcd_putc+0xd2>
	} else {
		LCD4_OFF;
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2108      	movs	r1, #8
 8000c0c:	4824      	ldr	r0, [pc, #144]	; (8000ca0 <lcd_putc+0x160>)
 8000c0e:	f000 fdc8 	bl	80017a2 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x02 ) {
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d005      	beq.n	8000c28 <lcd_putc+0xe8>
		LCD5_ON;
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2110      	movs	r1, #16
 8000c20:	481f      	ldr	r0, [pc, #124]	; (8000ca0 <lcd_putc+0x160>)
 8000c22:	f000 fdbe 	bl	80017a2 <HAL_GPIO_WritePin>
 8000c26:	e004      	b.n	8000c32 <lcd_putc+0xf2>
	} else {
    LCD5_OFF;
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2110      	movs	r1, #16
 8000c2c:	481c      	ldr	r0, [pc, #112]	; (8000ca0 <lcd_putc+0x160>)
 8000c2e:	f000 fdb8 	bl	80017a2 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x04 ) {
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d005      	beq.n	8000c48 <lcd_putc+0x108>
		LCD6_ON;
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2120      	movs	r1, #32
 8000c40:	4817      	ldr	r0, [pc, #92]	; (8000ca0 <lcd_putc+0x160>)
 8000c42:	f000 fdae 	bl	80017a2 <HAL_GPIO_WritePin>
 8000c46:	e004      	b.n	8000c52 <lcd_putc+0x112>
	} else {
    LCD6_OFF;
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2120      	movs	r1, #32
 8000c4c:	4814      	ldr	r0, [pc, #80]	; (8000ca0 <lcd_putc+0x160>)
 8000c4e:	f000 fda8 	bl	80017a2 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x08 ) {
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d005      	beq.n	8000c68 <lcd_putc+0x128>
		LCD7_ON;
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2140      	movs	r1, #64	; 0x40
 8000c60:	480f      	ldr	r0, [pc, #60]	; (8000ca0 <lcd_putc+0x160>)
 8000c62:	f000 fd9e 	bl	80017a2 <HAL_GPIO_WritePin>
 8000c66:	e004      	b.n	8000c72 <lcd_putc+0x132>
	} else {
    LCD7_OFF;
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2140      	movs	r1, #64	; 0x40
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <lcd_putc+0x160>)
 8000c6e:	f000 fd98 	bl	80017a2 <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 8000c72:	2201      	movs	r2, #1
 8000c74:	2110      	movs	r1, #16
 8000c76:	4809      	ldr	r0, [pc, #36]	; (8000c9c <lcd_putc+0x15c>)
 8000c78:	f000 fd93 	bl	80017a2 <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f000 faed 	bl	800125c <HAL_Delay>
  LCDE_OFF;
 8000c82:	2200      	movs	r2, #0
 8000c84:	2110      	movs	r1, #16
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <lcd_putc+0x15c>)
 8000c88:	f000 fd8b 	bl	80017a2 <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f000 fae5 	bl	800125c <HAL_Delay>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40010800 	.word	0x40010800
 8000ca0:	40010c00 	.word	0x40010c00

08000ca4 <lcd_command>:
void lcd_command(unsigned char cmd){	//Sends Command to LCD
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]

	LCDRS_OFF;
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	4853      	ldr	r0, [pc, #332]	; (8000e00 <lcd_command+0x15c>)
 8000cb4:	f000 fd75 	bl	80017a2 <HAL_GPIO_WritePin>

	if ( cmd & 0x10 ) {
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 0310 	and.w	r3, r3, #16
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d005      	beq.n	8000cce <lcd_command+0x2a>
		LCD4_ON;
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2108      	movs	r1, #8
 8000cc6:	484f      	ldr	r0, [pc, #316]	; (8000e04 <lcd_command+0x160>)
 8000cc8:	f000 fd6b 	bl	80017a2 <HAL_GPIO_WritePin>
 8000ccc:	e004      	b.n	8000cd8 <lcd_command+0x34>
	} else {
		LCD4_OFF;
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	484c      	ldr	r0, [pc, #304]	; (8000e04 <lcd_command+0x160>)
 8000cd4:	f000 fd65 	bl	80017a2 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x20 ) {
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 0320 	and.w	r3, r3, #32
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <lcd_command+0x4a>
		LCD5_ON;
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	4847      	ldr	r0, [pc, #284]	; (8000e04 <lcd_command+0x160>)
 8000ce8:	f000 fd5b 	bl	80017a2 <HAL_GPIO_WritePin>
 8000cec:	e004      	b.n	8000cf8 <lcd_command+0x54>
	} else {
		LCD5_OFF;
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	4844      	ldr	r0, [pc, #272]	; (8000e04 <lcd_command+0x160>)
 8000cf4:	f000 fd55 	bl	80017a2 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x40 ) {
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d005      	beq.n	8000d0e <lcd_command+0x6a>
		LCD6_ON;
 8000d02:	2201      	movs	r2, #1
 8000d04:	2120      	movs	r1, #32
 8000d06:	483f      	ldr	r0, [pc, #252]	; (8000e04 <lcd_command+0x160>)
 8000d08:	f000 fd4b 	bl	80017a2 <HAL_GPIO_WritePin>
 8000d0c:	e004      	b.n	8000d18 <lcd_command+0x74>
	} else {
		LCD6_OFF;
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2120      	movs	r1, #32
 8000d12:	483c      	ldr	r0, [pc, #240]	; (8000e04 <lcd_command+0x160>)
 8000d14:	f000 fd45 	bl	80017a2 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x80 ) {
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	da05      	bge.n	8000d2c <lcd_command+0x88>
		LCD7_ON;
 8000d20:	2201      	movs	r2, #1
 8000d22:	2140      	movs	r1, #64	; 0x40
 8000d24:	4837      	ldr	r0, [pc, #220]	; (8000e04 <lcd_command+0x160>)
 8000d26:	f000 fd3c 	bl	80017a2 <HAL_GPIO_WritePin>
 8000d2a:	e004      	b.n	8000d36 <lcd_command+0x92>
	} else {
		LCD7_OFF;
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2140      	movs	r1, #64	; 0x40
 8000d30:	4834      	ldr	r0, [pc, #208]	; (8000e04 <lcd_command+0x160>)
 8000d32:	f000 fd36 	bl	80017a2 <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 8000d36:	2201      	movs	r2, #1
 8000d38:	2110      	movs	r1, #16
 8000d3a:	4831      	ldr	r0, [pc, #196]	; (8000e00 <lcd_command+0x15c>)
 8000d3c:	f000 fd31 	bl	80017a2 <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 8000d40:	2001      	movs	r0, #1
 8000d42:	f000 fa8b 	bl	800125c <HAL_Delay>
	LCDE_OFF;
 8000d46:	2200      	movs	r2, #0
 8000d48:	2110      	movs	r1, #16
 8000d4a:	482d      	ldr	r0, [pc, #180]	; (8000e00 <lcd_command+0x15c>)
 8000d4c:	f000 fd29 	bl	80017a2 <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f000 fa83 	bl	800125c <HAL_Delay>

	if ( cmd & 0x01 ) {
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d005      	beq.n	8000d6c <lcd_command+0xc8>
		LCD4_ON;
 8000d60:	2201      	movs	r2, #1
 8000d62:	2108      	movs	r1, #8
 8000d64:	4827      	ldr	r0, [pc, #156]	; (8000e04 <lcd_command+0x160>)
 8000d66:	f000 fd1c 	bl	80017a2 <HAL_GPIO_WritePin>
 8000d6a:	e004      	b.n	8000d76 <lcd_command+0xd2>
	} else {
		LCD4_OFF;
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2108      	movs	r1, #8
 8000d70:	4824      	ldr	r0, [pc, #144]	; (8000e04 <lcd_command+0x160>)
 8000d72:	f000 fd16 	bl	80017a2 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x02 ) {
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d005      	beq.n	8000d8c <lcd_command+0xe8>
		LCD5_ON;
 8000d80:	2201      	movs	r2, #1
 8000d82:	2110      	movs	r1, #16
 8000d84:	481f      	ldr	r0, [pc, #124]	; (8000e04 <lcd_command+0x160>)
 8000d86:	f000 fd0c 	bl	80017a2 <HAL_GPIO_WritePin>
 8000d8a:	e004      	b.n	8000d96 <lcd_command+0xf2>
	} else {
		LCD5_OFF;
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2110      	movs	r1, #16
 8000d90:	481c      	ldr	r0, [pc, #112]	; (8000e04 <lcd_command+0x160>)
 8000d92:	f000 fd06 	bl	80017a2 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x04 ) {
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d005      	beq.n	8000dac <lcd_command+0x108>
		LCD6_ON;
 8000da0:	2201      	movs	r2, #1
 8000da2:	2120      	movs	r1, #32
 8000da4:	4817      	ldr	r0, [pc, #92]	; (8000e04 <lcd_command+0x160>)
 8000da6:	f000 fcfc 	bl	80017a2 <HAL_GPIO_WritePin>
 8000daa:	e004      	b.n	8000db6 <lcd_command+0x112>
	} else {
		LCD6_OFF;
 8000dac:	2200      	movs	r2, #0
 8000dae:	2120      	movs	r1, #32
 8000db0:	4814      	ldr	r0, [pc, #80]	; (8000e04 <lcd_command+0x160>)
 8000db2:	f000 fcf6 	bl	80017a2 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x08 ) {
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 0308 	and.w	r3, r3, #8
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d005      	beq.n	8000dcc <lcd_command+0x128>
		LCD7_ON;
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2140      	movs	r1, #64	; 0x40
 8000dc4:	480f      	ldr	r0, [pc, #60]	; (8000e04 <lcd_command+0x160>)
 8000dc6:	f000 fcec 	bl	80017a2 <HAL_GPIO_WritePin>
 8000dca:	e004      	b.n	8000dd6 <lcd_command+0x132>
	} else {
		LCD7_OFF;
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2140      	movs	r1, #64	; 0x40
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <lcd_command+0x160>)
 8000dd2:	f000 fce6 	bl	80017a2 <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2110      	movs	r1, #16
 8000dda:	4809      	ldr	r0, [pc, #36]	; (8000e00 <lcd_command+0x15c>)
 8000ddc:	f000 fce1 	bl	80017a2 <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f000 fa3b 	bl	800125c <HAL_Delay>
	LCDE_OFF;
 8000de6:	2200      	movs	r2, #0
 8000de8:	2110      	movs	r1, #16
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <lcd_command+0x15c>)
 8000dec:	f000 fcd9 	bl	80017a2 <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 8000df0:	2001      	movs	r0, #1
 8000df2:	f000 fa33 	bl	800125c <HAL_Delay>

}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40010800 	.word	0x40010800
 8000e04:	40010c00 	.word	0x40010c00

08000e08 <lcd_gotoxy>:
	for(i=0; i<nBytes; i++){	// print data
		lcd_putc(data[i]);
	}
}

void lcd_gotoxy(unsigned char x, unsigned char y){		//Cursor to X Y position
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	460a      	mov	r2, r1
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	4613      	mov	r3, r2
 8000e16:	71bb      	strb	r3, [r7, #6]
	register unsigned char DDRAMAddr;

	switch(y){		// remap lines into proper order
 8000e18:	79bb      	ldrb	r3, [r7, #6]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d81b      	bhi.n	8000e58 <lcd_gotoxy+0x50>
 8000e20:	a201      	add	r2, pc, #4	; (adr r2, 8000e28 <lcd_gotoxy+0x20>)
 8000e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e26:	bf00      	nop
 8000e28:	08000e39 	.word	0x08000e39
 8000e2c:	08000e41 	.word	0x08000e41
 8000e30:	08000e49 	.word	0x08000e49
 8000e34:	08000e51 	.word	0x08000e51
	case 1: DDRAMAddr = LCD_LINE0_DDRAMADDR+x-1; break;
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	b2dc      	uxtb	r4, r3
 8000e3e:	e00f      	b.n	8000e60 <lcd_gotoxy+0x58>
	case 2: DDRAMAddr = LCD_LINE1_DDRAMADDR+x-1; break;
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	333f      	adds	r3, #63	; 0x3f
 8000e44:	b2dc      	uxtb	r4, r3
 8000e46:	e00b      	b.n	8000e60 <lcd_gotoxy+0x58>
	case 3: DDRAMAddr = LCD_LINE2_DDRAMADDR+x-1; break;
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	3313      	adds	r3, #19
 8000e4c:	b2dc      	uxtb	r4, r3
 8000e4e:	e007      	b.n	8000e60 <lcd_gotoxy+0x58>
	case 4: DDRAMAddr = LCD_LINE3_DDRAMADDR+x-1; break;
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	3353      	adds	r3, #83	; 0x53
 8000e54:	b2dc      	uxtb	r4, r3
 8000e56:	e003      	b.n	8000e60 <lcd_gotoxy+0x58>
	default: DDRAMAddr =LCD_LINE0_DDRAMADDR+x-1;break;
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	b2dc      	uxtb	r4, r3
 8000e5e:	bf00      	nop
	}
	lcd_command(1<<LCD_DDRAM|DDRAMAddr);	// set data address
 8000e60:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff1c 	bl	8000ca4 <lcd_command>
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd90      	pop	{r4, r7, pc}

08000e74 <lcd_clear>:
        lcd_command(a++);			//	incrementa la direccion para la data
		lcd_putc(car[i]);			//	escribe caracter
	}
}

void lcd_clear(void){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    lcd_command(CLEAR_DISPLAY);
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f7ff ff13 	bl	8000ca4 <lcd_command>
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e8a:	f000 f985 	bl	8001198 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e8e:	f000 f865 	bl	8000f5c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e92:	f000 f89d 	bl	8000fd0 <MX_GPIO_Init>
	 lcd_putc(0xe0); //Beta
	 HAL_Delay(20000);
	 lcd_clear(); //Borra pantalla
	 char tecla; */

	keypad_init();
 8000e96:	f7ff fb3b 	bl	8000510 <keypad_init>
	HAL_Delay(10);
 8000e9a:	200a      	movs	r0, #10
 8000e9c:	f000 f9de 	bl	800125c <HAL_Delay>
	lcd_init();
 8000ea0:	f7ff fd24 	bl	80008ec <lcd_init>

	float num_f = 547.801, temporal_frac;
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <main+0xcc>)
 8000ea6:	623b      	str	r3, [r7, #32]
	uint32_t p_entera, p_frac;
	char str_entera[3];
	char str_frac[3];
	p_entera = (uint32_t) num_f; //Parte entera
 8000ea8:	6a38      	ldr	r0, [r7, #32]
 8000eaa:	f7ff fb11 	bl	80004d0 <__aeabi_f2uiz>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	61fb      	str	r3, [r7, #28]
	temporal_frac = (num_f - p_entera) * 1000;
 8000eb2:	69f8      	ldr	r0, [r7, #28]
 8000eb4:	f7ff fab4 	bl	8000420 <__aeabi_ui2f>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	6a38      	ldr	r0, [r7, #32]
 8000ebe:	f7ff f9fd 	bl	80002bc <__aeabi_fsub>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4923      	ldr	r1, [pc, #140]	; (8000f54 <main+0xd0>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff f940 	bl	800014c <__aeabi_fmul>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	61bb      	str	r3, [r7, #24]
	p_frac = (uint32_t) temporal_frac;
 8000ed0:	69b8      	ldr	r0, [r7, #24]
 8000ed2:	f7ff fafd 	bl	80004d0 <__aeabi_f2uiz>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	617b      	str	r3, [r7, #20]
	sprintf(str_entera, "%3d", p_entera);
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	69fa      	ldr	r2, [r7, #28]
 8000ee0:	491d      	ldr	r1, [pc, #116]	; (8000f58 <main+0xd4>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 f890 	bl	8002008 <siprintf>
	sprintf(str_frac, "%3d", p_frac);
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	491a      	ldr	r1, [pc, #104]	; (8000f58 <main+0xd4>)
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 f88a 	bl	8002008 <siprintf>

	char tecla;

	uint32_t cursor_blink = 1; // 1 = on | 0 = off
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	613b      	str	r3, [r7, #16]
	uint32_t cursor = 1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
	lcd_command(CURSOR_ON);
 8000efc:	200f      	movs	r0, #15
 8000efe:	f7ff fed1 	bl	8000ca4 <lcd_command>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (tecla == '#')
 8000f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f06:	2b23      	cmp	r3, #35	; 0x23
 8000f08:	d103      	bne.n	8000f12 <main+0x8e>
			lcd_gotoxy(1, 2); //Brinca a segunda linea
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f7ff ff7b 	bl	8000e08 <lcd_gotoxy>
		tecla = keypad_read();
 8000f12:	f7ff fba7 	bl	8000664 <keypad_read>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((tecla != 0) && (tecla != '#') && (tecla != '*'))
 8000f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00c      	beq.n	8000f3e <main+0xba>
 8000f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f28:	2b23      	cmp	r3, #35	; 0x23
 8000f2a:	d008      	beq.n	8000f3e <main+0xba>
 8000f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f30:	2b2a      	cmp	r3, #42	; 0x2a
 8000f32:	d004      	beq.n	8000f3e <main+0xba>
			lcd_putc(tecla);
 8000f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fe01 	bl	8000b40 <lcd_putc>
		if (tecla == '*')
 8000f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f42:	2b2a      	cmp	r3, #42	; 0x2a
 8000f44:	d1dd      	bne.n	8000f02 <main+0x7e>
			lcd_command(CURSOR_MOVE_LEFT);
 8000f46:	2010      	movs	r0, #16
 8000f48:	f7ff feac 	bl	8000ca4 <lcd_command>
		if (tecla == '#')
 8000f4c:	e7d9      	b.n	8000f02 <main+0x7e>
 8000f4e:	bf00      	nop
 8000f50:	4408f344 	.word	0x4408f344
 8000f54:	447a0000 	.word	0x447a0000
 8000f58:	08002924 	.word	0x08002924

08000f5c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b090      	sub	sp, #64	; 0x40
 8000f60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f62:	f107 0318 	add.w	r3, r7, #24
 8000f66:	2228      	movs	r2, #40	; 0x28
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 f844 	bl	8001ff8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f86:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fc1f 	bl	80017d4 <HAL_RCC_OscConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0x44>
		Error_Handler();
 8000f9c:	f000 f83a 	bl	8001014 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fe8d 	bl	8001cd8 <HAL_RCC_ClockConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x6c>
		Error_Handler();
 8000fc4:	f000 f826 	bl	8001014 <Error_Handler>
	}
}
 8000fc8:	bf00      	nop
 8000fca:	3740      	adds	r7, #64	; 0x40
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <MX_GPIO_Init+0x40>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <MX_GPIO_Init+0x40>)
 8000fdc:	f043 0320 	orr.w	r3, r3, #32
 8000fe0:	6193      	str	r3, [r2, #24]
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <MX_GPIO_Init+0x40>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f003 0320 	and.w	r3, r3, #32
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <MX_GPIO_Init+0x40>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4a07      	ldr	r2, [pc, #28]	; (8001010 <MX_GPIO_Init+0x40>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6193      	str	r3, [r2, #24]
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <MX_GPIO_Init+0x40>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]

}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	40021000 	.word	0x40021000

08001014 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001018:	b672      	cpsid	i
}
 800101a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800101c:	e7fe      	b.n	800101c <Error_Handler+0x8>
	...

08001020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_MspInit+0x5c>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	4a14      	ldr	r2, [pc, #80]	; (800107c <HAL_MspInit+0x5c>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6193      	str	r3, [r2, #24]
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_MspInit+0x5c>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_MspInit+0x5c>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a0e      	ldr	r2, [pc, #56]	; (800107c <HAL_MspInit+0x5c>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_MspInit+0x5c>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_MspInit+0x60>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_MspInit+0x60>)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	40021000 	.word	0x40021000
 8001080:	40010000 	.word	0x40010000

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <NMI_Handler+0x4>

0800108a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <MemManage_Handler+0x4>

08001096 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ca:	f000 f8ab 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010dc:	4a14      	ldr	r2, [pc, #80]	; (8001130 <_sbrk+0x5c>)
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <_sbrk+0x60>)
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <_sbrk+0x64>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <_sbrk+0x68>)
 80010f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	429a      	cmp	r2, r3
 8001102:	d207      	bcs.n	8001114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001104:	f000 ff4e 	bl	8001fa4 <__errno>
 8001108:	4603      	mov	r3, r0
 800110a:	220c      	movs	r2, #12
 800110c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001112:	e009      	b.n	8001128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <_sbrk+0x64>)
 8001124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20005000 	.word	0x20005000
 8001134:	00000400 	.word	0x00000400
 8001138:	2000008c 	.word	0x2000008c
 800113c:	200000a8 	.word	0x200000a8

08001140 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800114c:	480c      	ldr	r0, [pc, #48]	; (8001180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114e:	490d      	ldr	r1, [pc, #52]	; (8001184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001164:	4c0a      	ldr	r4, [pc, #40]	; (8001190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001172:	f7ff ffe5 	bl	8001140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001176:	f000 ff1b 	bl	8001fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800117a:	f7ff fe83 	bl	8000e84 <main>
  bx lr
 800117e:	4770      	bx	lr
  ldr r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001184:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001188:	08002984 	.word	0x08002984
  ldr r2, =_sbss
 800118c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001190:	200000a4 	.word	0x200000a4

08001194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC1_2_IRQHandler>
	...

08001198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_Init+0x28>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_Init+0x28>)
 80011a2:	f043 0310 	orr.w	r3, r3, #16
 80011a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 f92b 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ae:	200f      	movs	r0, #15
 80011b0:	f000 f808 	bl	80011c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b4:	f7ff ff34 	bl	8001020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40022000 	.word	0x40022000

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_InitTick+0x54>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x58>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	fbb3 f3f1 	udiv	r3, r3, r1
 80011de:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f935 	bl	8001452 <HAL_SYSTICK_Config>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00e      	b.n	8001210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b0f      	cmp	r3, #15
 80011f6:	d80a      	bhi.n	800120e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f8:	2200      	movs	r2, #0
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001200:	f000 f90b 	bl	800141a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001204:	4a06      	ldr	r2, [pc, #24]	; (8001220 <HAL_InitTick+0x5c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000000 	.word	0x20000000
 800121c:	20000008 	.word	0x20000008
 8001220:	20000004 	.word	0x20000004

08001224 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_IncTick+0x1c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_IncTick+0x20>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a03      	ldr	r2, [pc, #12]	; (8001244 <HAL_IncTick+0x20>)
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	20000008 	.word	0x20000008
 8001244:	20000090 	.word	0x20000090

08001248 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b02      	ldr	r3, [pc, #8]	; (8001258 <HAL_GetTick+0x10>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	20000090 	.word	0x20000090

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff fff0 	bl	8001248 <HAL_GetTick>
 8001268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001274:	d005      	beq.n	8001282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_Delay+0x44>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001282:	bf00      	nop
 8001284:	f7ff ffe0 	bl	8001248 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8f7      	bhi.n	8001284 <HAL_Delay+0x28>
  {
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013e4:	f7ff ff90 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff49 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff5e 	bl	80012ec <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff90 	bl	800135c <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5f 	bl	8001308 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffb0 	bl	80013c0 <SysTick_Config>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800146c:	b480      	push	{r7}
 800146e:	b08b      	sub	sp, #44	; 0x2c
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147e:	e169      	b.n	8001754 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001480:	2201      	movs	r2, #1
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	429a      	cmp	r2, r3
 800149a:	f040 8158 	bne.w	800174e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4a9a      	ldr	r2, [pc, #616]	; (800170c <HAL_GPIO_Init+0x2a0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d05e      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
 80014a8:	4a98      	ldr	r2, [pc, #608]	; (800170c <HAL_GPIO_Init+0x2a0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d875      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014ae:	4a98      	ldr	r2, [pc, #608]	; (8001710 <HAL_GPIO_Init+0x2a4>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d058      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
 80014b4:	4a96      	ldr	r2, [pc, #600]	; (8001710 <HAL_GPIO_Init+0x2a4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d86f      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014ba:	4a96      	ldr	r2, [pc, #600]	; (8001714 <HAL_GPIO_Init+0x2a8>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d052      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
 80014c0:	4a94      	ldr	r2, [pc, #592]	; (8001714 <HAL_GPIO_Init+0x2a8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d869      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014c6:	4a94      	ldr	r2, [pc, #592]	; (8001718 <HAL_GPIO_Init+0x2ac>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d04c      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
 80014cc:	4a92      	ldr	r2, [pc, #584]	; (8001718 <HAL_GPIO_Init+0x2ac>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d863      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014d2:	4a92      	ldr	r2, [pc, #584]	; (800171c <HAL_GPIO_Init+0x2b0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d046      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
 80014d8:	4a90      	ldr	r2, [pc, #576]	; (800171c <HAL_GPIO_Init+0x2b0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d85d      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014de:	2b12      	cmp	r3, #18
 80014e0:	d82a      	bhi.n	8001538 <HAL_GPIO_Init+0xcc>
 80014e2:	2b12      	cmp	r3, #18
 80014e4:	d859      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014e6:	a201      	add	r2, pc, #4	; (adr r2, 80014ec <HAL_GPIO_Init+0x80>)
 80014e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ec:	08001567 	.word	0x08001567
 80014f0:	08001541 	.word	0x08001541
 80014f4:	08001553 	.word	0x08001553
 80014f8:	08001595 	.word	0x08001595
 80014fc:	0800159b 	.word	0x0800159b
 8001500:	0800159b 	.word	0x0800159b
 8001504:	0800159b 	.word	0x0800159b
 8001508:	0800159b 	.word	0x0800159b
 800150c:	0800159b 	.word	0x0800159b
 8001510:	0800159b 	.word	0x0800159b
 8001514:	0800159b 	.word	0x0800159b
 8001518:	0800159b 	.word	0x0800159b
 800151c:	0800159b 	.word	0x0800159b
 8001520:	0800159b 	.word	0x0800159b
 8001524:	0800159b 	.word	0x0800159b
 8001528:	0800159b 	.word	0x0800159b
 800152c:	0800159b 	.word	0x0800159b
 8001530:	08001549 	.word	0x08001549
 8001534:	0800155d 	.word	0x0800155d
 8001538:	4a79      	ldr	r2, [pc, #484]	; (8001720 <HAL_GPIO_Init+0x2b4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800153e:	e02c      	b.n	800159a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	623b      	str	r3, [r7, #32]
          break;
 8001546:	e029      	b.n	800159c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	3304      	adds	r3, #4
 800154e:	623b      	str	r3, [r7, #32]
          break;
 8001550:	e024      	b.n	800159c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	3308      	adds	r3, #8
 8001558:	623b      	str	r3, [r7, #32]
          break;
 800155a:	e01f      	b.n	800159c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	330c      	adds	r3, #12
 8001562:	623b      	str	r3, [r7, #32]
          break;
 8001564:	e01a      	b.n	800159c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800156e:	2304      	movs	r3, #4
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e013      	b.n	800159c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d105      	bne.n	8001588 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800157c:	2308      	movs	r3, #8
 800157e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69fa      	ldr	r2, [r7, #28]
 8001584:	611a      	str	r2, [r3, #16]
          break;
 8001586:	e009      	b.n	800159c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001588:	2308      	movs	r3, #8
 800158a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	615a      	str	r2, [r3, #20]
          break;
 8001592:	e003      	b.n	800159c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
          break;
 8001598:	e000      	b.n	800159c <HAL_GPIO_Init+0x130>
          break;
 800159a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	2bff      	cmp	r3, #255	; 0xff
 80015a0:	d801      	bhi.n	80015a6 <HAL_GPIO_Init+0x13a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	e001      	b.n	80015aa <HAL_GPIO_Init+0x13e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3304      	adds	r3, #4
 80015aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2bff      	cmp	r3, #255	; 0xff
 80015b0:	d802      	bhi.n	80015b8 <HAL_GPIO_Init+0x14c>
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	e002      	b.n	80015be <HAL_GPIO_Init+0x152>
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	3b08      	subs	r3, #8
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	210f      	movs	r1, #15
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	fa01 f303 	lsl.w	r3, r1, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	401a      	ands	r2, r3
 80015d0:	6a39      	ldr	r1, [r7, #32]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	fa01 f303 	lsl.w	r3, r1, r3
 80015d8:	431a      	orrs	r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80b1 	beq.w	800174e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ec:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <HAL_GPIO_Init+0x2b8>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a4c      	ldr	r2, [pc, #304]	; (8001724 <HAL_GPIO_Init+0x2b8>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b4a      	ldr	r3, [pc, #296]	; (8001724 <HAL_GPIO_Init+0x2b8>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001604:	4a48      	ldr	r2, [pc, #288]	; (8001728 <HAL_GPIO_Init+0x2bc>)
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001610:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4013      	ands	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a40      	ldr	r2, [pc, #256]	; (800172c <HAL_GPIO_Init+0x2c0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d013      	beq.n	8001658 <HAL_GPIO_Init+0x1ec>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a3f      	ldr	r2, [pc, #252]	; (8001730 <HAL_GPIO_Init+0x2c4>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d00d      	beq.n	8001654 <HAL_GPIO_Init+0x1e8>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a3e      	ldr	r2, [pc, #248]	; (8001734 <HAL_GPIO_Init+0x2c8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d007      	beq.n	8001650 <HAL_GPIO_Init+0x1e4>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a3d      	ldr	r2, [pc, #244]	; (8001738 <HAL_GPIO_Init+0x2cc>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d101      	bne.n	800164c <HAL_GPIO_Init+0x1e0>
 8001648:	2303      	movs	r3, #3
 800164a:	e006      	b.n	800165a <HAL_GPIO_Init+0x1ee>
 800164c:	2304      	movs	r3, #4
 800164e:	e004      	b.n	800165a <HAL_GPIO_Init+0x1ee>
 8001650:	2302      	movs	r3, #2
 8001652:	e002      	b.n	800165a <HAL_GPIO_Init+0x1ee>
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <HAL_GPIO_Init+0x1ee>
 8001658:	2300      	movs	r3, #0
 800165a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165c:	f002 0203 	and.w	r2, r2, #3
 8001660:	0092      	lsls	r2, r2, #2
 8001662:	4093      	lsls	r3, r2
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800166a:	492f      	ldr	r1, [pc, #188]	; (8001728 <HAL_GPIO_Init+0x2bc>)
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3302      	adds	r3, #2
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d006      	beq.n	8001692 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001684:	4b2d      	ldr	r3, [pc, #180]	; (800173c <HAL_GPIO_Init+0x2d0>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	492c      	ldr	r1, [pc, #176]	; (800173c <HAL_GPIO_Init+0x2d0>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	600b      	str	r3, [r1, #0]
 8001690:	e006      	b.n	80016a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001692:	4b2a      	ldr	r3, [pc, #168]	; (800173c <HAL_GPIO_Init+0x2d0>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	43db      	mvns	r3, r3
 800169a:	4928      	ldr	r1, [pc, #160]	; (800173c <HAL_GPIO_Init+0x2d0>)
 800169c:	4013      	ands	r3, r2
 800169e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d006      	beq.n	80016ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016ac:	4b23      	ldr	r3, [pc, #140]	; (800173c <HAL_GPIO_Init+0x2d0>)
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	4922      	ldr	r1, [pc, #136]	; (800173c <HAL_GPIO_Init+0x2d0>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
 80016b8:	e006      	b.n	80016c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_GPIO_Init+0x2d0>)
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	491e      	ldr	r1, [pc, #120]	; (800173c <HAL_GPIO_Init+0x2d0>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d006      	beq.n	80016e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_GPIO_Init+0x2d0>)
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	4918      	ldr	r1, [pc, #96]	; (800173c <HAL_GPIO_Init+0x2d0>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	608b      	str	r3, [r1, #8]
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_GPIO_Init+0x2d0>)
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	4914      	ldr	r1, [pc, #80]	; (800173c <HAL_GPIO_Init+0x2d0>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d021      	beq.n	8001740 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_GPIO_Init+0x2d0>)
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	490e      	ldr	r1, [pc, #56]	; (800173c <HAL_GPIO_Init+0x2d0>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	60cb      	str	r3, [r1, #12]
 8001708:	e021      	b.n	800174e <HAL_GPIO_Init+0x2e2>
 800170a:	bf00      	nop
 800170c:	10320000 	.word	0x10320000
 8001710:	10310000 	.word	0x10310000
 8001714:	10220000 	.word	0x10220000
 8001718:	10210000 	.word	0x10210000
 800171c:	10120000 	.word	0x10120000
 8001720:	10110000 	.word	0x10110000
 8001724:	40021000 	.word	0x40021000
 8001728:	40010000 	.word	0x40010000
 800172c:	40010800 	.word	0x40010800
 8001730:	40010c00 	.word	0x40010c00
 8001734:	40011000 	.word	0x40011000
 8001738:	40011400 	.word	0x40011400
 800173c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_GPIO_Init+0x304>)
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	43db      	mvns	r3, r3
 8001748:	4909      	ldr	r1, [pc, #36]	; (8001770 <HAL_GPIO_Init+0x304>)
 800174a:	4013      	ands	r3, r2
 800174c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	3301      	adds	r3, #1
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	fa22 f303 	lsr.w	r3, r2, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	f47f ae8e 	bne.w	8001480 <HAL_GPIO_Init+0x14>
  }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	372c      	adds	r7, #44	; 0x2c
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	40010400 	.word	0x40010400

08001774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800178c:	2301      	movs	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e001      	b.n	8001796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	460b      	mov	r3, r1
 80017ac:	807b      	strh	r3, [r7, #2]
 80017ae:	4613      	mov	r3, r2
 80017b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b2:	787b      	ldrb	r3, [r7, #1]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b8:	887a      	ldrh	r2, [r7, #2]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017be:	e003      	b.n	80017c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	041a      	lsls	r2, r3, #16
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	611a      	str	r2, [r3, #16]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e272      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 8087 	beq.w	8001902 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017f4:	4b92      	ldr	r3, [pc, #584]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 030c 	and.w	r3, r3, #12
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d00c      	beq.n	800181a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001800:	4b8f      	ldr	r3, [pc, #572]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	2b08      	cmp	r3, #8
 800180a:	d112      	bne.n	8001832 <HAL_RCC_OscConfig+0x5e>
 800180c:	4b8c      	ldr	r3, [pc, #560]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001818:	d10b      	bne.n	8001832 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181a:	4b89      	ldr	r3, [pc, #548]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d06c      	beq.n	8001900 <HAL_RCC_OscConfig+0x12c>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d168      	bne.n	8001900 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e24c      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x76>
 800183c:	4b80      	ldr	r3, [pc, #512]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a7f      	ldr	r2, [pc, #508]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	e02e      	b.n	80018a8 <HAL_RCC_OscConfig+0xd4>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0x98>
 8001852:	4b7b      	ldr	r3, [pc, #492]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a7a      	ldr	r2, [pc, #488]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b78      	ldr	r3, [pc, #480]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a77      	ldr	r2, [pc, #476]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e01d      	b.n	80018a8 <HAL_RCC_OscConfig+0xd4>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0xbc>
 8001876:	4b72      	ldr	r3, [pc, #456]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a71      	ldr	r2, [pc, #452]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800187c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b6f      	ldr	r3, [pc, #444]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a6e      	ldr	r2, [pc, #440]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e00b      	b.n	80018a8 <HAL_RCC_OscConfig+0xd4>
 8001890:	4b6b      	ldr	r3, [pc, #428]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a6a      	ldr	r2, [pc, #424]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b68      	ldr	r3, [pc, #416]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a67      	ldr	r2, [pc, #412]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d013      	beq.n	80018d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fcca 	bl	8001248 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b8:	f7ff fcc6 	bl	8001248 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	; 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e200      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0xe4>
 80018d6:	e014      	b.n	8001902 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fcb6 	bl	8001248 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fcb2 	bl	8001248 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e1ec      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f2:	4b53      	ldr	r3, [pc, #332]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x10c>
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d063      	beq.n	80019d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800190e:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800191a:	4b49      	ldr	r3, [pc, #292]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b08      	cmp	r3, #8
 8001924:	d11c      	bne.n	8001960 <HAL_RCC_OscConfig+0x18c>
 8001926:	4b46      	ldr	r3, [pc, #280]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d116      	bne.n	8001960 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	4b43      	ldr	r3, [pc, #268]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x176>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e1c0      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194a:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4939      	ldr	r1, [pc, #228]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195e:	e03a      	b.n	80019d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001968:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196e:	f7ff fc6b 	bl	8001248 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001976:	f7ff fc67 	bl	8001248 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e1a1      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001988:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001994:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4927      	ldr	r1, [pc, #156]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
 80019a8:	e015      	b.n	80019d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fc4a 	bl	8001248 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b8:	f7ff fc46 	bl	8001248 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e180      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d03a      	beq.n	8001a58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d019      	beq.n	8001a1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_RCC_OscConfig+0x274>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f0:	f7ff fc2a 	bl	8001248 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f8:	f7ff fc26 	bl	8001248 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e160      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a16:	2001      	movs	r0, #1
 8001a18:	f000 faa6 	bl	8001f68 <RCC_Delay>
 8001a1c:	e01c      	b.n	8001a58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a24:	f7ff fc10 	bl	8001248 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2a:	e00f      	b.n	8001a4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fc0c 	bl	8001248 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d908      	bls.n	8001a4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e146      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000
 8001a44:	42420000 	.word	0x42420000
 8001a48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4c:	4b92      	ldr	r3, [pc, #584]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1e9      	bne.n	8001a2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80a6 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6a:	4b8b      	ldr	r3, [pc, #556]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10d      	bne.n	8001a92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	4b88      	ldr	r3, [pc, #544]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	4a87      	ldr	r2, [pc, #540]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	61d3      	str	r3, [r2, #28]
 8001a82:	4b85      	ldr	r3, [pc, #532]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a92:	4b82      	ldr	r3, [pc, #520]	; (8001c9c <HAL_RCC_OscConfig+0x4c8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d118      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a9e:	4b7f      	ldr	r3, [pc, #508]	; (8001c9c <HAL_RCC_OscConfig+0x4c8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a7e      	ldr	r2, [pc, #504]	; (8001c9c <HAL_RCC_OscConfig+0x4c8>)
 8001aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fbcd 	bl	8001248 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab2:	f7ff fbc9 	bl	8001248 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b64      	cmp	r3, #100	; 0x64
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e103      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac4:	4b75      	ldr	r3, [pc, #468]	; (8001c9c <HAL_RCC_OscConfig+0x4c8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d106      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x312>
 8001ad8:	4b6f      	ldr	r3, [pc, #444]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4a6e      	ldr	r2, [pc, #440]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6213      	str	r3, [r2, #32]
 8001ae4:	e02d      	b.n	8001b42 <HAL_RCC_OscConfig+0x36e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x334>
 8001aee:	4b6a      	ldr	r3, [pc, #424]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4a69      	ldr	r2, [pc, #420]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	6213      	str	r3, [r2, #32]
 8001afa:	4b67      	ldr	r3, [pc, #412]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4a66      	ldr	r2, [pc, #408]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	f023 0304 	bic.w	r3, r3, #4
 8001b04:	6213      	str	r3, [r2, #32]
 8001b06:	e01c      	b.n	8001b42 <HAL_RCC_OscConfig+0x36e>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b05      	cmp	r3, #5
 8001b0e:	d10c      	bne.n	8001b2a <HAL_RCC_OscConfig+0x356>
 8001b10:	4b61      	ldr	r3, [pc, #388]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	4a60      	ldr	r2, [pc, #384]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	f043 0304 	orr.w	r3, r3, #4
 8001b1a:	6213      	str	r3, [r2, #32]
 8001b1c:	4b5e      	ldr	r3, [pc, #376]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4a5d      	ldr	r2, [pc, #372]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6213      	str	r3, [r2, #32]
 8001b28:	e00b      	b.n	8001b42 <HAL_RCC_OscConfig+0x36e>
 8001b2a:	4b5b      	ldr	r3, [pc, #364]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4a5a      	ldr	r2, [pc, #360]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6213      	str	r3, [r2, #32]
 8001b36:	4b58      	ldr	r3, [pc, #352]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	4a57      	ldr	r2, [pc, #348]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	f023 0304 	bic.w	r3, r3, #4
 8001b40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d015      	beq.n	8001b76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fb7d 	bl	8001248 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7ff fb79 	bl	8001248 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e0b1      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b68:	4b4b      	ldr	r3, [pc, #300]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0ee      	beq.n	8001b52 <HAL_RCC_OscConfig+0x37e>
 8001b74:	e014      	b.n	8001ba0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fb67 	bl	8001248 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f7ff fb63 	bl	8001248 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e09b      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b94:	4b40      	ldr	r3, [pc, #256]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1ee      	bne.n	8001b7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d105      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba6:	4b3c      	ldr	r3, [pc, #240]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a3b      	ldr	r2, [pc, #236]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8087 	beq.w	8001cca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bbc:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d061      	beq.n	8001c8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d146      	bne.n	8001c5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd0:	4b33      	ldr	r3, [pc, #204]	; (8001ca0 <HAL_RCC_OscConfig+0x4cc>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fb37 	bl	8001248 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bde:	f7ff fb33 	bl	8001248 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e06d      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf0:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f0      	bne.n	8001bde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c04:	d108      	bne.n	8001c18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c06:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	4921      	ldr	r1, [pc, #132]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a19      	ldr	r1, [r3, #32]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	491b      	ldr	r1, [pc, #108]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <HAL_RCC_OscConfig+0x4cc>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7ff fb07 	bl	8001248 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7ff fb03 	bl	8001248 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e03d      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x46a>
 8001c5c:	e035      	b.n	8001cca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_RCC_OscConfig+0x4cc>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff faf0 	bl	8001248 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff faec 	bl	8001248 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e026      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x498>
 8001c8a:	e01e      	b.n	8001cca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e019      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40007000 	.word	0x40007000
 8001ca0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_OscConfig+0x500>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0d0      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cec:	4b6a      	ldr	r3, [pc, #424]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d910      	bls.n	8001d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfa:	4b67      	ldr	r3, [pc, #412]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 0207 	bic.w	r2, r3, #7
 8001d02:	4965      	ldr	r1, [pc, #404]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0b8      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d020      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d4c:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d58:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	494d      	ldr	r1, [pc, #308]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d040      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d115      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e07f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d96:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e073      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da6:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e06b      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db6:	4b39      	ldr	r3, [pc, #228]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f023 0203 	bic.w	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4936      	ldr	r1, [pc, #216]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc8:	f7ff fa3e 	bl	8001248 <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7ff fa3a 	bl	8001248 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e053      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	4b2d      	ldr	r3, [pc, #180]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 020c 	and.w	r2, r3, #12
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d1eb      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001df8:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d210      	bcs.n	8001e28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0207 	bic.w	r2, r3, #7
 8001e0e:	4922      	ldr	r1, [pc, #136]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e032      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4916      	ldr	r1, [pc, #88]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	490e      	ldr	r1, [pc, #56]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e66:	f000 f821 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	490a      	ldr	r1, [pc, #40]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e78:	5ccb      	ldrb	r3, [r1, r3]
 8001e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8001e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f99c 	bl	80011c4 <HAL_InitTick>

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40022000 	.word	0x40022000
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	08002938 	.word	0x08002938
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	20000004 	.word	0x20000004

08001eac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eac:	b490      	push	{r4, r7}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001eb2:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xac>)
 8001eb4:	1d3c      	adds	r4, r7, #4
 8001eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ebc:	f240 2301 	movw	r3, #513	; 0x201
 8001ec0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ed6:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d002      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0x40>
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d003      	beq.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x46>
 8001eea:	e02b      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eec:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eee:	623b      	str	r3, [r7, #32]
      break;
 8001ef0:	e02b      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	0c9b      	lsrs	r3, r3, #18
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3328      	adds	r3, #40	; 0x28
 8001efc:	443b      	add	r3, r7
 8001efe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f02:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d012      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f0e:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	0c5b      	lsrs	r3, r3, #17
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	3328      	adds	r3, #40	; 0x28
 8001f1a:	443b      	add	r3, r7
 8001f1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f26:	fb03 f202 	mul.w	r2, r3, r2
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
 8001f32:	e004      	b.n	8001f3e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f38:	fb02 f303 	mul.w	r3, r2, r3
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	623b      	str	r3, [r7, #32]
      break;
 8001f42:	e002      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f46:	623b      	str	r3, [r7, #32]
      break;
 8001f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc90      	pop	{r4, r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	08002928 	.word	0x08002928
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	007a1200 	.word	0x007a1200
 8001f64:	003d0900 	.word	0x003d0900

08001f68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <RCC_Delay+0x34>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <RCC_Delay+0x38>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	0a5b      	lsrs	r3, r3, #9
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f84:	bf00      	nop
  }
  while (Delay --);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1e5a      	subs	r2, r3, #1
 8001f8a:	60fa      	str	r2, [r7, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f9      	bne.n	8001f84 <RCC_Delay+0x1c>
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	10624dd3 	.word	0x10624dd3

08001fa4 <__errno>:
 8001fa4:	4b01      	ldr	r3, [pc, #4]	; (8001fac <__errno+0x8>)
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	2000000c 	.word	0x2000000c

08001fb0 <__libc_init_array>:
 8001fb0:	b570      	push	{r4, r5, r6, lr}
 8001fb2:	2600      	movs	r6, #0
 8001fb4:	4d0c      	ldr	r5, [pc, #48]	; (8001fe8 <__libc_init_array+0x38>)
 8001fb6:	4c0d      	ldr	r4, [pc, #52]	; (8001fec <__libc_init_array+0x3c>)
 8001fb8:	1b64      	subs	r4, r4, r5
 8001fba:	10a4      	asrs	r4, r4, #2
 8001fbc:	42a6      	cmp	r6, r4
 8001fbe:	d109      	bne.n	8001fd4 <__libc_init_array+0x24>
 8001fc0:	f000 fc9c 	bl	80028fc <_init>
 8001fc4:	2600      	movs	r6, #0
 8001fc6:	4d0a      	ldr	r5, [pc, #40]	; (8001ff0 <__libc_init_array+0x40>)
 8001fc8:	4c0a      	ldr	r4, [pc, #40]	; (8001ff4 <__libc_init_array+0x44>)
 8001fca:	1b64      	subs	r4, r4, r5
 8001fcc:	10a4      	asrs	r4, r4, #2
 8001fce:	42a6      	cmp	r6, r4
 8001fd0:	d105      	bne.n	8001fde <__libc_init_array+0x2e>
 8001fd2:	bd70      	pop	{r4, r5, r6, pc}
 8001fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fd8:	4798      	blx	r3
 8001fda:	3601      	adds	r6, #1
 8001fdc:	e7ee      	b.n	8001fbc <__libc_init_array+0xc>
 8001fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fe2:	4798      	blx	r3
 8001fe4:	3601      	adds	r6, #1
 8001fe6:	e7f2      	b.n	8001fce <__libc_init_array+0x1e>
 8001fe8:	0800297c 	.word	0x0800297c
 8001fec:	0800297c 	.word	0x0800297c
 8001ff0:	0800297c 	.word	0x0800297c
 8001ff4:	08002980 	.word	0x08002980

08001ff8 <memset>:
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4402      	add	r2, r0
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d100      	bne.n	8002002 <memset+0xa>
 8002000:	4770      	bx	lr
 8002002:	f803 1b01 	strb.w	r1, [r3], #1
 8002006:	e7f9      	b.n	8001ffc <memset+0x4>

08002008 <siprintf>:
 8002008:	b40e      	push	{r1, r2, r3}
 800200a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800200e:	b500      	push	{lr}
 8002010:	b09c      	sub	sp, #112	; 0x70
 8002012:	ab1d      	add	r3, sp, #116	; 0x74
 8002014:	9002      	str	r0, [sp, #8]
 8002016:	9006      	str	r0, [sp, #24]
 8002018:	9107      	str	r1, [sp, #28]
 800201a:	9104      	str	r1, [sp, #16]
 800201c:	4808      	ldr	r0, [pc, #32]	; (8002040 <siprintf+0x38>)
 800201e:	4909      	ldr	r1, [pc, #36]	; (8002044 <siprintf+0x3c>)
 8002020:	f853 2b04 	ldr.w	r2, [r3], #4
 8002024:	9105      	str	r1, [sp, #20]
 8002026:	6800      	ldr	r0, [r0, #0]
 8002028:	a902      	add	r1, sp, #8
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	f000 f868 	bl	8002100 <_svfiprintf_r>
 8002030:	2200      	movs	r2, #0
 8002032:	9b02      	ldr	r3, [sp, #8]
 8002034:	701a      	strb	r2, [r3, #0]
 8002036:	b01c      	add	sp, #112	; 0x70
 8002038:	f85d eb04 	ldr.w	lr, [sp], #4
 800203c:	b003      	add	sp, #12
 800203e:	4770      	bx	lr
 8002040:	2000000c 	.word	0x2000000c
 8002044:	ffff0208 	.word	0xffff0208

08002048 <__ssputs_r>:
 8002048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800204c:	688e      	ldr	r6, [r1, #8]
 800204e:	4682      	mov	sl, r0
 8002050:	429e      	cmp	r6, r3
 8002052:	460c      	mov	r4, r1
 8002054:	4690      	mov	r8, r2
 8002056:	461f      	mov	r7, r3
 8002058:	d838      	bhi.n	80020cc <__ssputs_r+0x84>
 800205a:	898a      	ldrh	r2, [r1, #12]
 800205c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002060:	d032      	beq.n	80020c8 <__ssputs_r+0x80>
 8002062:	6825      	ldr	r5, [r4, #0]
 8002064:	6909      	ldr	r1, [r1, #16]
 8002066:	3301      	adds	r3, #1
 8002068:	eba5 0901 	sub.w	r9, r5, r1
 800206c:	6965      	ldr	r5, [r4, #20]
 800206e:	444b      	add	r3, r9
 8002070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002074:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002078:	106d      	asrs	r5, r5, #1
 800207a:	429d      	cmp	r5, r3
 800207c:	bf38      	it	cc
 800207e:	461d      	movcc	r5, r3
 8002080:	0553      	lsls	r3, r2, #21
 8002082:	d531      	bpl.n	80020e8 <__ssputs_r+0xa0>
 8002084:	4629      	mov	r1, r5
 8002086:	f000 fb6f 	bl	8002768 <_malloc_r>
 800208a:	4606      	mov	r6, r0
 800208c:	b950      	cbnz	r0, 80020a4 <__ssputs_r+0x5c>
 800208e:	230c      	movs	r3, #12
 8002090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002094:	f8ca 3000 	str.w	r3, [sl]
 8002098:	89a3      	ldrh	r3, [r4, #12]
 800209a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800209e:	81a3      	strh	r3, [r4, #12]
 80020a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020a4:	464a      	mov	r2, r9
 80020a6:	6921      	ldr	r1, [r4, #16]
 80020a8:	f000 face 	bl	8002648 <memcpy>
 80020ac:	89a3      	ldrh	r3, [r4, #12]
 80020ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80020b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b6:	81a3      	strh	r3, [r4, #12]
 80020b8:	6126      	str	r6, [r4, #16]
 80020ba:	444e      	add	r6, r9
 80020bc:	6026      	str	r6, [r4, #0]
 80020be:	463e      	mov	r6, r7
 80020c0:	6165      	str	r5, [r4, #20]
 80020c2:	eba5 0509 	sub.w	r5, r5, r9
 80020c6:	60a5      	str	r5, [r4, #8]
 80020c8:	42be      	cmp	r6, r7
 80020ca:	d900      	bls.n	80020ce <__ssputs_r+0x86>
 80020cc:	463e      	mov	r6, r7
 80020ce:	4632      	mov	r2, r6
 80020d0:	4641      	mov	r1, r8
 80020d2:	6820      	ldr	r0, [r4, #0]
 80020d4:	f000 fac6 	bl	8002664 <memmove>
 80020d8:	68a3      	ldr	r3, [r4, #8]
 80020da:	2000      	movs	r0, #0
 80020dc:	1b9b      	subs	r3, r3, r6
 80020de:	60a3      	str	r3, [r4, #8]
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	4433      	add	r3, r6
 80020e4:	6023      	str	r3, [r4, #0]
 80020e6:	e7db      	b.n	80020a0 <__ssputs_r+0x58>
 80020e8:	462a      	mov	r2, r5
 80020ea:	f000 fbb1 	bl	8002850 <_realloc_r>
 80020ee:	4606      	mov	r6, r0
 80020f0:	2800      	cmp	r0, #0
 80020f2:	d1e1      	bne.n	80020b8 <__ssputs_r+0x70>
 80020f4:	4650      	mov	r0, sl
 80020f6:	6921      	ldr	r1, [r4, #16]
 80020f8:	f000 face 	bl	8002698 <_free_r>
 80020fc:	e7c7      	b.n	800208e <__ssputs_r+0x46>
	...

08002100 <_svfiprintf_r>:
 8002100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002104:	4698      	mov	r8, r3
 8002106:	898b      	ldrh	r3, [r1, #12]
 8002108:	4607      	mov	r7, r0
 800210a:	061b      	lsls	r3, r3, #24
 800210c:	460d      	mov	r5, r1
 800210e:	4614      	mov	r4, r2
 8002110:	b09d      	sub	sp, #116	; 0x74
 8002112:	d50e      	bpl.n	8002132 <_svfiprintf_r+0x32>
 8002114:	690b      	ldr	r3, [r1, #16]
 8002116:	b963      	cbnz	r3, 8002132 <_svfiprintf_r+0x32>
 8002118:	2140      	movs	r1, #64	; 0x40
 800211a:	f000 fb25 	bl	8002768 <_malloc_r>
 800211e:	6028      	str	r0, [r5, #0]
 8002120:	6128      	str	r0, [r5, #16]
 8002122:	b920      	cbnz	r0, 800212e <_svfiprintf_r+0x2e>
 8002124:	230c      	movs	r3, #12
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800212c:	e0d1      	b.n	80022d2 <_svfiprintf_r+0x1d2>
 800212e:	2340      	movs	r3, #64	; 0x40
 8002130:	616b      	str	r3, [r5, #20]
 8002132:	2300      	movs	r3, #0
 8002134:	9309      	str	r3, [sp, #36]	; 0x24
 8002136:	2320      	movs	r3, #32
 8002138:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800213c:	2330      	movs	r3, #48	; 0x30
 800213e:	f04f 0901 	mov.w	r9, #1
 8002142:	f8cd 800c 	str.w	r8, [sp, #12]
 8002146:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80022ec <_svfiprintf_r+0x1ec>
 800214a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800214e:	4623      	mov	r3, r4
 8002150:	469a      	mov	sl, r3
 8002152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002156:	b10a      	cbz	r2, 800215c <_svfiprintf_r+0x5c>
 8002158:	2a25      	cmp	r2, #37	; 0x25
 800215a:	d1f9      	bne.n	8002150 <_svfiprintf_r+0x50>
 800215c:	ebba 0b04 	subs.w	fp, sl, r4
 8002160:	d00b      	beq.n	800217a <_svfiprintf_r+0x7a>
 8002162:	465b      	mov	r3, fp
 8002164:	4622      	mov	r2, r4
 8002166:	4629      	mov	r1, r5
 8002168:	4638      	mov	r0, r7
 800216a:	f7ff ff6d 	bl	8002048 <__ssputs_r>
 800216e:	3001      	adds	r0, #1
 8002170:	f000 80aa 	beq.w	80022c8 <_svfiprintf_r+0x1c8>
 8002174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002176:	445a      	add	r2, fp
 8002178:	9209      	str	r2, [sp, #36]	; 0x24
 800217a:	f89a 3000 	ldrb.w	r3, [sl]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80a2 	beq.w	80022c8 <_svfiprintf_r+0x1c8>
 8002184:	2300      	movs	r3, #0
 8002186:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800218a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800218e:	f10a 0a01 	add.w	sl, sl, #1
 8002192:	9304      	str	r3, [sp, #16]
 8002194:	9307      	str	r3, [sp, #28]
 8002196:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800219a:	931a      	str	r3, [sp, #104]	; 0x68
 800219c:	4654      	mov	r4, sl
 800219e:	2205      	movs	r2, #5
 80021a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021a4:	4851      	ldr	r0, [pc, #324]	; (80022ec <_svfiprintf_r+0x1ec>)
 80021a6:	f000 fa41 	bl	800262c <memchr>
 80021aa:	9a04      	ldr	r2, [sp, #16]
 80021ac:	b9d8      	cbnz	r0, 80021e6 <_svfiprintf_r+0xe6>
 80021ae:	06d0      	lsls	r0, r2, #27
 80021b0:	bf44      	itt	mi
 80021b2:	2320      	movmi	r3, #32
 80021b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80021b8:	0711      	lsls	r1, r2, #28
 80021ba:	bf44      	itt	mi
 80021bc:	232b      	movmi	r3, #43	; 0x2b
 80021be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80021c2:	f89a 3000 	ldrb.w	r3, [sl]
 80021c6:	2b2a      	cmp	r3, #42	; 0x2a
 80021c8:	d015      	beq.n	80021f6 <_svfiprintf_r+0xf6>
 80021ca:	4654      	mov	r4, sl
 80021cc:	2000      	movs	r0, #0
 80021ce:	f04f 0c0a 	mov.w	ip, #10
 80021d2:	9a07      	ldr	r2, [sp, #28]
 80021d4:	4621      	mov	r1, r4
 80021d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021da:	3b30      	subs	r3, #48	; 0x30
 80021dc:	2b09      	cmp	r3, #9
 80021de:	d94e      	bls.n	800227e <_svfiprintf_r+0x17e>
 80021e0:	b1b0      	cbz	r0, 8002210 <_svfiprintf_r+0x110>
 80021e2:	9207      	str	r2, [sp, #28]
 80021e4:	e014      	b.n	8002210 <_svfiprintf_r+0x110>
 80021e6:	eba0 0308 	sub.w	r3, r0, r8
 80021ea:	fa09 f303 	lsl.w	r3, r9, r3
 80021ee:	4313      	orrs	r3, r2
 80021f0:	46a2      	mov	sl, r4
 80021f2:	9304      	str	r3, [sp, #16]
 80021f4:	e7d2      	b.n	800219c <_svfiprintf_r+0x9c>
 80021f6:	9b03      	ldr	r3, [sp, #12]
 80021f8:	1d19      	adds	r1, r3, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	9103      	str	r1, [sp, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	bfbb      	ittet	lt
 8002202:	425b      	neglt	r3, r3
 8002204:	f042 0202 	orrlt.w	r2, r2, #2
 8002208:	9307      	strge	r3, [sp, #28]
 800220a:	9307      	strlt	r3, [sp, #28]
 800220c:	bfb8      	it	lt
 800220e:	9204      	strlt	r2, [sp, #16]
 8002210:	7823      	ldrb	r3, [r4, #0]
 8002212:	2b2e      	cmp	r3, #46	; 0x2e
 8002214:	d10c      	bne.n	8002230 <_svfiprintf_r+0x130>
 8002216:	7863      	ldrb	r3, [r4, #1]
 8002218:	2b2a      	cmp	r3, #42	; 0x2a
 800221a:	d135      	bne.n	8002288 <_svfiprintf_r+0x188>
 800221c:	9b03      	ldr	r3, [sp, #12]
 800221e:	3402      	adds	r4, #2
 8002220:	1d1a      	adds	r2, r3, #4
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	9203      	str	r2, [sp, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	bfb8      	it	lt
 800222a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800222e:	9305      	str	r3, [sp, #20]
 8002230:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80022f0 <_svfiprintf_r+0x1f0>
 8002234:	2203      	movs	r2, #3
 8002236:	4650      	mov	r0, sl
 8002238:	7821      	ldrb	r1, [r4, #0]
 800223a:	f000 f9f7 	bl	800262c <memchr>
 800223e:	b140      	cbz	r0, 8002252 <_svfiprintf_r+0x152>
 8002240:	2340      	movs	r3, #64	; 0x40
 8002242:	eba0 000a 	sub.w	r0, r0, sl
 8002246:	fa03 f000 	lsl.w	r0, r3, r0
 800224a:	9b04      	ldr	r3, [sp, #16]
 800224c:	3401      	adds	r4, #1
 800224e:	4303      	orrs	r3, r0
 8002250:	9304      	str	r3, [sp, #16]
 8002252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002256:	2206      	movs	r2, #6
 8002258:	4826      	ldr	r0, [pc, #152]	; (80022f4 <_svfiprintf_r+0x1f4>)
 800225a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800225e:	f000 f9e5 	bl	800262c <memchr>
 8002262:	2800      	cmp	r0, #0
 8002264:	d038      	beq.n	80022d8 <_svfiprintf_r+0x1d8>
 8002266:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <_svfiprintf_r+0x1f8>)
 8002268:	bb1b      	cbnz	r3, 80022b2 <_svfiprintf_r+0x1b2>
 800226a:	9b03      	ldr	r3, [sp, #12]
 800226c:	3307      	adds	r3, #7
 800226e:	f023 0307 	bic.w	r3, r3, #7
 8002272:	3308      	adds	r3, #8
 8002274:	9303      	str	r3, [sp, #12]
 8002276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002278:	4433      	add	r3, r6
 800227a:	9309      	str	r3, [sp, #36]	; 0x24
 800227c:	e767      	b.n	800214e <_svfiprintf_r+0x4e>
 800227e:	460c      	mov	r4, r1
 8002280:	2001      	movs	r0, #1
 8002282:	fb0c 3202 	mla	r2, ip, r2, r3
 8002286:	e7a5      	b.n	80021d4 <_svfiprintf_r+0xd4>
 8002288:	2300      	movs	r3, #0
 800228a:	f04f 0c0a 	mov.w	ip, #10
 800228e:	4619      	mov	r1, r3
 8002290:	3401      	adds	r4, #1
 8002292:	9305      	str	r3, [sp, #20]
 8002294:	4620      	mov	r0, r4
 8002296:	f810 2b01 	ldrb.w	r2, [r0], #1
 800229a:	3a30      	subs	r2, #48	; 0x30
 800229c:	2a09      	cmp	r2, #9
 800229e:	d903      	bls.n	80022a8 <_svfiprintf_r+0x1a8>
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0c5      	beq.n	8002230 <_svfiprintf_r+0x130>
 80022a4:	9105      	str	r1, [sp, #20]
 80022a6:	e7c3      	b.n	8002230 <_svfiprintf_r+0x130>
 80022a8:	4604      	mov	r4, r0
 80022aa:	2301      	movs	r3, #1
 80022ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80022b0:	e7f0      	b.n	8002294 <_svfiprintf_r+0x194>
 80022b2:	ab03      	add	r3, sp, #12
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	462a      	mov	r2, r5
 80022b8:	4638      	mov	r0, r7
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <_svfiprintf_r+0x1fc>)
 80022bc:	a904      	add	r1, sp, #16
 80022be:	f3af 8000 	nop.w
 80022c2:	1c42      	adds	r2, r0, #1
 80022c4:	4606      	mov	r6, r0
 80022c6:	d1d6      	bne.n	8002276 <_svfiprintf_r+0x176>
 80022c8:	89ab      	ldrh	r3, [r5, #12]
 80022ca:	065b      	lsls	r3, r3, #25
 80022cc:	f53f af2c 	bmi.w	8002128 <_svfiprintf_r+0x28>
 80022d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022d2:	b01d      	add	sp, #116	; 0x74
 80022d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022d8:	ab03      	add	r3, sp, #12
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	462a      	mov	r2, r5
 80022de:	4638      	mov	r0, r7
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <_svfiprintf_r+0x1fc>)
 80022e2:	a904      	add	r1, sp, #16
 80022e4:	f000 f87c 	bl	80023e0 <_printf_i>
 80022e8:	e7eb      	b.n	80022c2 <_svfiprintf_r+0x1c2>
 80022ea:	bf00      	nop
 80022ec:	08002948 	.word	0x08002948
 80022f0:	0800294e 	.word	0x0800294e
 80022f4:	08002952 	.word	0x08002952
 80022f8:	00000000 	.word	0x00000000
 80022fc:	08002049 	.word	0x08002049

08002300 <_printf_common>:
 8002300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002304:	4616      	mov	r6, r2
 8002306:	4699      	mov	r9, r3
 8002308:	688a      	ldr	r2, [r1, #8]
 800230a:	690b      	ldr	r3, [r1, #16]
 800230c:	4607      	mov	r7, r0
 800230e:	4293      	cmp	r3, r2
 8002310:	bfb8      	it	lt
 8002312:	4613      	movlt	r3, r2
 8002314:	6033      	str	r3, [r6, #0]
 8002316:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800231a:	460c      	mov	r4, r1
 800231c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002320:	b10a      	cbz	r2, 8002326 <_printf_common+0x26>
 8002322:	3301      	adds	r3, #1
 8002324:	6033      	str	r3, [r6, #0]
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	0699      	lsls	r1, r3, #26
 800232a:	bf42      	ittt	mi
 800232c:	6833      	ldrmi	r3, [r6, #0]
 800232e:	3302      	addmi	r3, #2
 8002330:	6033      	strmi	r3, [r6, #0]
 8002332:	6825      	ldr	r5, [r4, #0]
 8002334:	f015 0506 	ands.w	r5, r5, #6
 8002338:	d106      	bne.n	8002348 <_printf_common+0x48>
 800233a:	f104 0a19 	add.w	sl, r4, #25
 800233e:	68e3      	ldr	r3, [r4, #12]
 8002340:	6832      	ldr	r2, [r6, #0]
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	42ab      	cmp	r3, r5
 8002346:	dc28      	bgt.n	800239a <_printf_common+0x9a>
 8002348:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800234c:	1e13      	subs	r3, r2, #0
 800234e:	6822      	ldr	r2, [r4, #0]
 8002350:	bf18      	it	ne
 8002352:	2301      	movne	r3, #1
 8002354:	0692      	lsls	r2, r2, #26
 8002356:	d42d      	bmi.n	80023b4 <_printf_common+0xb4>
 8002358:	4649      	mov	r1, r9
 800235a:	4638      	mov	r0, r7
 800235c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002360:	47c0      	blx	r8
 8002362:	3001      	adds	r0, #1
 8002364:	d020      	beq.n	80023a8 <_printf_common+0xa8>
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	68e5      	ldr	r5, [r4, #12]
 800236a:	f003 0306 	and.w	r3, r3, #6
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf18      	it	ne
 8002372:	2500      	movne	r5, #0
 8002374:	6832      	ldr	r2, [r6, #0]
 8002376:	f04f 0600 	mov.w	r6, #0
 800237a:	68a3      	ldr	r3, [r4, #8]
 800237c:	bf08      	it	eq
 800237e:	1aad      	subeq	r5, r5, r2
 8002380:	6922      	ldr	r2, [r4, #16]
 8002382:	bf08      	it	eq
 8002384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002388:	4293      	cmp	r3, r2
 800238a:	bfc4      	itt	gt
 800238c:	1a9b      	subgt	r3, r3, r2
 800238e:	18ed      	addgt	r5, r5, r3
 8002390:	341a      	adds	r4, #26
 8002392:	42b5      	cmp	r5, r6
 8002394:	d11a      	bne.n	80023cc <_printf_common+0xcc>
 8002396:	2000      	movs	r0, #0
 8002398:	e008      	b.n	80023ac <_printf_common+0xac>
 800239a:	2301      	movs	r3, #1
 800239c:	4652      	mov	r2, sl
 800239e:	4649      	mov	r1, r9
 80023a0:	4638      	mov	r0, r7
 80023a2:	47c0      	blx	r8
 80023a4:	3001      	adds	r0, #1
 80023a6:	d103      	bne.n	80023b0 <_printf_common+0xb0>
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023b0:	3501      	adds	r5, #1
 80023b2:	e7c4      	b.n	800233e <_printf_common+0x3e>
 80023b4:	2030      	movs	r0, #48	; 0x30
 80023b6:	18e1      	adds	r1, r4, r3
 80023b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80023c2:	4422      	add	r2, r4
 80023c4:	3302      	adds	r3, #2
 80023c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80023ca:	e7c5      	b.n	8002358 <_printf_common+0x58>
 80023cc:	2301      	movs	r3, #1
 80023ce:	4622      	mov	r2, r4
 80023d0:	4649      	mov	r1, r9
 80023d2:	4638      	mov	r0, r7
 80023d4:	47c0      	blx	r8
 80023d6:	3001      	adds	r0, #1
 80023d8:	d0e6      	beq.n	80023a8 <_printf_common+0xa8>
 80023da:	3601      	adds	r6, #1
 80023dc:	e7d9      	b.n	8002392 <_printf_common+0x92>
	...

080023e0 <_printf_i>:
 80023e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023e4:	7e0f      	ldrb	r7, [r1, #24]
 80023e6:	4691      	mov	r9, r2
 80023e8:	2f78      	cmp	r7, #120	; 0x78
 80023ea:	4680      	mov	r8, r0
 80023ec:	460c      	mov	r4, r1
 80023ee:	469a      	mov	sl, r3
 80023f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80023f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80023f6:	d807      	bhi.n	8002408 <_printf_i+0x28>
 80023f8:	2f62      	cmp	r7, #98	; 0x62
 80023fa:	d80a      	bhi.n	8002412 <_printf_i+0x32>
 80023fc:	2f00      	cmp	r7, #0
 80023fe:	f000 80d9 	beq.w	80025b4 <_printf_i+0x1d4>
 8002402:	2f58      	cmp	r7, #88	; 0x58
 8002404:	f000 80a4 	beq.w	8002550 <_printf_i+0x170>
 8002408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800240c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002410:	e03a      	b.n	8002488 <_printf_i+0xa8>
 8002412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002416:	2b15      	cmp	r3, #21
 8002418:	d8f6      	bhi.n	8002408 <_printf_i+0x28>
 800241a:	a101      	add	r1, pc, #4	; (adr r1, 8002420 <_printf_i+0x40>)
 800241c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002420:	08002479 	.word	0x08002479
 8002424:	0800248d 	.word	0x0800248d
 8002428:	08002409 	.word	0x08002409
 800242c:	08002409 	.word	0x08002409
 8002430:	08002409 	.word	0x08002409
 8002434:	08002409 	.word	0x08002409
 8002438:	0800248d 	.word	0x0800248d
 800243c:	08002409 	.word	0x08002409
 8002440:	08002409 	.word	0x08002409
 8002444:	08002409 	.word	0x08002409
 8002448:	08002409 	.word	0x08002409
 800244c:	0800259b 	.word	0x0800259b
 8002450:	080024bd 	.word	0x080024bd
 8002454:	0800257d 	.word	0x0800257d
 8002458:	08002409 	.word	0x08002409
 800245c:	08002409 	.word	0x08002409
 8002460:	080025bd 	.word	0x080025bd
 8002464:	08002409 	.word	0x08002409
 8002468:	080024bd 	.word	0x080024bd
 800246c:	08002409 	.word	0x08002409
 8002470:	08002409 	.word	0x08002409
 8002474:	08002585 	.word	0x08002585
 8002478:	682b      	ldr	r3, [r5, #0]
 800247a:	1d1a      	adds	r2, r3, #4
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	602a      	str	r2, [r5, #0]
 8002480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002488:	2301      	movs	r3, #1
 800248a:	e0a4      	b.n	80025d6 <_printf_i+0x1f6>
 800248c:	6820      	ldr	r0, [r4, #0]
 800248e:	6829      	ldr	r1, [r5, #0]
 8002490:	0606      	lsls	r6, r0, #24
 8002492:	f101 0304 	add.w	r3, r1, #4
 8002496:	d50a      	bpl.n	80024ae <_printf_i+0xce>
 8002498:	680e      	ldr	r6, [r1, #0]
 800249a:	602b      	str	r3, [r5, #0]
 800249c:	2e00      	cmp	r6, #0
 800249e:	da03      	bge.n	80024a8 <_printf_i+0xc8>
 80024a0:	232d      	movs	r3, #45	; 0x2d
 80024a2:	4276      	negs	r6, r6
 80024a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024a8:	230a      	movs	r3, #10
 80024aa:	485e      	ldr	r0, [pc, #376]	; (8002624 <_printf_i+0x244>)
 80024ac:	e019      	b.n	80024e2 <_printf_i+0x102>
 80024ae:	680e      	ldr	r6, [r1, #0]
 80024b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80024b4:	602b      	str	r3, [r5, #0]
 80024b6:	bf18      	it	ne
 80024b8:	b236      	sxthne	r6, r6
 80024ba:	e7ef      	b.n	800249c <_printf_i+0xbc>
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	6820      	ldr	r0, [r4, #0]
 80024c0:	1d19      	adds	r1, r3, #4
 80024c2:	6029      	str	r1, [r5, #0]
 80024c4:	0601      	lsls	r1, r0, #24
 80024c6:	d501      	bpl.n	80024cc <_printf_i+0xec>
 80024c8:	681e      	ldr	r6, [r3, #0]
 80024ca:	e002      	b.n	80024d2 <_printf_i+0xf2>
 80024cc:	0646      	lsls	r6, r0, #25
 80024ce:	d5fb      	bpl.n	80024c8 <_printf_i+0xe8>
 80024d0:	881e      	ldrh	r6, [r3, #0]
 80024d2:	2f6f      	cmp	r7, #111	; 0x6f
 80024d4:	bf0c      	ite	eq
 80024d6:	2308      	moveq	r3, #8
 80024d8:	230a      	movne	r3, #10
 80024da:	4852      	ldr	r0, [pc, #328]	; (8002624 <_printf_i+0x244>)
 80024dc:	2100      	movs	r1, #0
 80024de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80024e2:	6865      	ldr	r5, [r4, #4]
 80024e4:	2d00      	cmp	r5, #0
 80024e6:	bfa8      	it	ge
 80024e8:	6821      	ldrge	r1, [r4, #0]
 80024ea:	60a5      	str	r5, [r4, #8]
 80024ec:	bfa4      	itt	ge
 80024ee:	f021 0104 	bicge.w	r1, r1, #4
 80024f2:	6021      	strge	r1, [r4, #0]
 80024f4:	b90e      	cbnz	r6, 80024fa <_printf_i+0x11a>
 80024f6:	2d00      	cmp	r5, #0
 80024f8:	d04d      	beq.n	8002596 <_printf_i+0x1b6>
 80024fa:	4615      	mov	r5, r2
 80024fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8002500:	fb03 6711 	mls	r7, r3, r1, r6
 8002504:	5dc7      	ldrb	r7, [r0, r7]
 8002506:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800250a:	4637      	mov	r7, r6
 800250c:	42bb      	cmp	r3, r7
 800250e:	460e      	mov	r6, r1
 8002510:	d9f4      	bls.n	80024fc <_printf_i+0x11c>
 8002512:	2b08      	cmp	r3, #8
 8002514:	d10b      	bne.n	800252e <_printf_i+0x14e>
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	07de      	lsls	r6, r3, #31
 800251a:	d508      	bpl.n	800252e <_printf_i+0x14e>
 800251c:	6923      	ldr	r3, [r4, #16]
 800251e:	6861      	ldr	r1, [r4, #4]
 8002520:	4299      	cmp	r1, r3
 8002522:	bfde      	ittt	le
 8002524:	2330      	movle	r3, #48	; 0x30
 8002526:	f805 3c01 	strble.w	r3, [r5, #-1]
 800252a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800252e:	1b52      	subs	r2, r2, r5
 8002530:	6122      	str	r2, [r4, #16]
 8002532:	464b      	mov	r3, r9
 8002534:	4621      	mov	r1, r4
 8002536:	4640      	mov	r0, r8
 8002538:	f8cd a000 	str.w	sl, [sp]
 800253c:	aa03      	add	r2, sp, #12
 800253e:	f7ff fedf 	bl	8002300 <_printf_common>
 8002542:	3001      	adds	r0, #1
 8002544:	d14c      	bne.n	80025e0 <_printf_i+0x200>
 8002546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800254a:	b004      	add	sp, #16
 800254c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002550:	4834      	ldr	r0, [pc, #208]	; (8002624 <_printf_i+0x244>)
 8002552:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002556:	6829      	ldr	r1, [r5, #0]
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	f851 6b04 	ldr.w	r6, [r1], #4
 800255e:	6029      	str	r1, [r5, #0]
 8002560:	061d      	lsls	r5, r3, #24
 8002562:	d514      	bpl.n	800258e <_printf_i+0x1ae>
 8002564:	07df      	lsls	r7, r3, #31
 8002566:	bf44      	itt	mi
 8002568:	f043 0320 	orrmi.w	r3, r3, #32
 800256c:	6023      	strmi	r3, [r4, #0]
 800256e:	b91e      	cbnz	r6, 8002578 <_printf_i+0x198>
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	f023 0320 	bic.w	r3, r3, #32
 8002576:	6023      	str	r3, [r4, #0]
 8002578:	2310      	movs	r3, #16
 800257a:	e7af      	b.n	80024dc <_printf_i+0xfc>
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	f043 0320 	orr.w	r3, r3, #32
 8002582:	6023      	str	r3, [r4, #0]
 8002584:	2378      	movs	r3, #120	; 0x78
 8002586:	4828      	ldr	r0, [pc, #160]	; (8002628 <_printf_i+0x248>)
 8002588:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800258c:	e7e3      	b.n	8002556 <_printf_i+0x176>
 800258e:	0659      	lsls	r1, r3, #25
 8002590:	bf48      	it	mi
 8002592:	b2b6      	uxthmi	r6, r6
 8002594:	e7e6      	b.n	8002564 <_printf_i+0x184>
 8002596:	4615      	mov	r5, r2
 8002598:	e7bb      	b.n	8002512 <_printf_i+0x132>
 800259a:	682b      	ldr	r3, [r5, #0]
 800259c:	6826      	ldr	r6, [r4, #0]
 800259e:	1d18      	adds	r0, r3, #4
 80025a0:	6961      	ldr	r1, [r4, #20]
 80025a2:	6028      	str	r0, [r5, #0]
 80025a4:	0635      	lsls	r5, r6, #24
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	d501      	bpl.n	80025ae <_printf_i+0x1ce>
 80025aa:	6019      	str	r1, [r3, #0]
 80025ac:	e002      	b.n	80025b4 <_printf_i+0x1d4>
 80025ae:	0670      	lsls	r0, r6, #25
 80025b0:	d5fb      	bpl.n	80025aa <_printf_i+0x1ca>
 80025b2:	8019      	strh	r1, [r3, #0]
 80025b4:	2300      	movs	r3, #0
 80025b6:	4615      	mov	r5, r2
 80025b8:	6123      	str	r3, [r4, #16]
 80025ba:	e7ba      	b.n	8002532 <_printf_i+0x152>
 80025bc:	682b      	ldr	r3, [r5, #0]
 80025be:	2100      	movs	r1, #0
 80025c0:	1d1a      	adds	r2, r3, #4
 80025c2:	602a      	str	r2, [r5, #0]
 80025c4:	681d      	ldr	r5, [r3, #0]
 80025c6:	6862      	ldr	r2, [r4, #4]
 80025c8:	4628      	mov	r0, r5
 80025ca:	f000 f82f 	bl	800262c <memchr>
 80025ce:	b108      	cbz	r0, 80025d4 <_printf_i+0x1f4>
 80025d0:	1b40      	subs	r0, r0, r5
 80025d2:	6060      	str	r0, [r4, #4]
 80025d4:	6863      	ldr	r3, [r4, #4]
 80025d6:	6123      	str	r3, [r4, #16]
 80025d8:	2300      	movs	r3, #0
 80025da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025de:	e7a8      	b.n	8002532 <_printf_i+0x152>
 80025e0:	462a      	mov	r2, r5
 80025e2:	4649      	mov	r1, r9
 80025e4:	4640      	mov	r0, r8
 80025e6:	6923      	ldr	r3, [r4, #16]
 80025e8:	47d0      	blx	sl
 80025ea:	3001      	adds	r0, #1
 80025ec:	d0ab      	beq.n	8002546 <_printf_i+0x166>
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	079b      	lsls	r3, r3, #30
 80025f2:	d413      	bmi.n	800261c <_printf_i+0x23c>
 80025f4:	68e0      	ldr	r0, [r4, #12]
 80025f6:	9b03      	ldr	r3, [sp, #12]
 80025f8:	4298      	cmp	r0, r3
 80025fa:	bfb8      	it	lt
 80025fc:	4618      	movlt	r0, r3
 80025fe:	e7a4      	b.n	800254a <_printf_i+0x16a>
 8002600:	2301      	movs	r3, #1
 8002602:	4632      	mov	r2, r6
 8002604:	4649      	mov	r1, r9
 8002606:	4640      	mov	r0, r8
 8002608:	47d0      	blx	sl
 800260a:	3001      	adds	r0, #1
 800260c:	d09b      	beq.n	8002546 <_printf_i+0x166>
 800260e:	3501      	adds	r5, #1
 8002610:	68e3      	ldr	r3, [r4, #12]
 8002612:	9903      	ldr	r1, [sp, #12]
 8002614:	1a5b      	subs	r3, r3, r1
 8002616:	42ab      	cmp	r3, r5
 8002618:	dcf2      	bgt.n	8002600 <_printf_i+0x220>
 800261a:	e7eb      	b.n	80025f4 <_printf_i+0x214>
 800261c:	2500      	movs	r5, #0
 800261e:	f104 0619 	add.w	r6, r4, #25
 8002622:	e7f5      	b.n	8002610 <_printf_i+0x230>
 8002624:	08002959 	.word	0x08002959
 8002628:	0800296a 	.word	0x0800296a

0800262c <memchr>:
 800262c:	4603      	mov	r3, r0
 800262e:	b510      	push	{r4, lr}
 8002630:	b2c9      	uxtb	r1, r1
 8002632:	4402      	add	r2, r0
 8002634:	4293      	cmp	r3, r2
 8002636:	4618      	mov	r0, r3
 8002638:	d101      	bne.n	800263e <memchr+0x12>
 800263a:	2000      	movs	r0, #0
 800263c:	e003      	b.n	8002646 <memchr+0x1a>
 800263e:	7804      	ldrb	r4, [r0, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	428c      	cmp	r4, r1
 8002644:	d1f6      	bne.n	8002634 <memchr+0x8>
 8002646:	bd10      	pop	{r4, pc}

08002648 <memcpy>:
 8002648:	440a      	add	r2, r1
 800264a:	4291      	cmp	r1, r2
 800264c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002650:	d100      	bne.n	8002654 <memcpy+0xc>
 8002652:	4770      	bx	lr
 8002654:	b510      	push	{r4, lr}
 8002656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800265a:	4291      	cmp	r1, r2
 800265c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002660:	d1f9      	bne.n	8002656 <memcpy+0xe>
 8002662:	bd10      	pop	{r4, pc}

08002664 <memmove>:
 8002664:	4288      	cmp	r0, r1
 8002666:	b510      	push	{r4, lr}
 8002668:	eb01 0402 	add.w	r4, r1, r2
 800266c:	d902      	bls.n	8002674 <memmove+0x10>
 800266e:	4284      	cmp	r4, r0
 8002670:	4623      	mov	r3, r4
 8002672:	d807      	bhi.n	8002684 <memmove+0x20>
 8002674:	1e43      	subs	r3, r0, #1
 8002676:	42a1      	cmp	r1, r4
 8002678:	d008      	beq.n	800268c <memmove+0x28>
 800267a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800267e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002682:	e7f8      	b.n	8002676 <memmove+0x12>
 8002684:	4601      	mov	r1, r0
 8002686:	4402      	add	r2, r0
 8002688:	428a      	cmp	r2, r1
 800268a:	d100      	bne.n	800268e <memmove+0x2a>
 800268c:	bd10      	pop	{r4, pc}
 800268e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002696:	e7f7      	b.n	8002688 <memmove+0x24>

08002698 <_free_r>:
 8002698:	b538      	push	{r3, r4, r5, lr}
 800269a:	4605      	mov	r5, r0
 800269c:	2900      	cmp	r1, #0
 800269e:	d040      	beq.n	8002722 <_free_r+0x8a>
 80026a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026a4:	1f0c      	subs	r4, r1, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bfb8      	it	lt
 80026aa:	18e4      	addlt	r4, r4, r3
 80026ac:	f000 f910 	bl	80028d0 <__malloc_lock>
 80026b0:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <_free_r+0x8c>)
 80026b2:	6813      	ldr	r3, [r2, #0]
 80026b4:	b933      	cbnz	r3, 80026c4 <_free_r+0x2c>
 80026b6:	6063      	str	r3, [r4, #4]
 80026b8:	6014      	str	r4, [r2, #0]
 80026ba:	4628      	mov	r0, r5
 80026bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026c0:	f000 b90c 	b.w	80028dc <__malloc_unlock>
 80026c4:	42a3      	cmp	r3, r4
 80026c6:	d908      	bls.n	80026da <_free_r+0x42>
 80026c8:	6820      	ldr	r0, [r4, #0]
 80026ca:	1821      	adds	r1, r4, r0
 80026cc:	428b      	cmp	r3, r1
 80026ce:	bf01      	itttt	eq
 80026d0:	6819      	ldreq	r1, [r3, #0]
 80026d2:	685b      	ldreq	r3, [r3, #4]
 80026d4:	1809      	addeq	r1, r1, r0
 80026d6:	6021      	streq	r1, [r4, #0]
 80026d8:	e7ed      	b.n	80026b6 <_free_r+0x1e>
 80026da:	461a      	mov	r2, r3
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	b10b      	cbz	r3, 80026e4 <_free_r+0x4c>
 80026e0:	42a3      	cmp	r3, r4
 80026e2:	d9fa      	bls.n	80026da <_free_r+0x42>
 80026e4:	6811      	ldr	r1, [r2, #0]
 80026e6:	1850      	adds	r0, r2, r1
 80026e8:	42a0      	cmp	r0, r4
 80026ea:	d10b      	bne.n	8002704 <_free_r+0x6c>
 80026ec:	6820      	ldr	r0, [r4, #0]
 80026ee:	4401      	add	r1, r0
 80026f0:	1850      	adds	r0, r2, r1
 80026f2:	4283      	cmp	r3, r0
 80026f4:	6011      	str	r1, [r2, #0]
 80026f6:	d1e0      	bne.n	80026ba <_free_r+0x22>
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4401      	add	r1, r0
 80026fe:	6011      	str	r1, [r2, #0]
 8002700:	6053      	str	r3, [r2, #4]
 8002702:	e7da      	b.n	80026ba <_free_r+0x22>
 8002704:	d902      	bls.n	800270c <_free_r+0x74>
 8002706:	230c      	movs	r3, #12
 8002708:	602b      	str	r3, [r5, #0]
 800270a:	e7d6      	b.n	80026ba <_free_r+0x22>
 800270c:	6820      	ldr	r0, [r4, #0]
 800270e:	1821      	adds	r1, r4, r0
 8002710:	428b      	cmp	r3, r1
 8002712:	bf01      	itttt	eq
 8002714:	6819      	ldreq	r1, [r3, #0]
 8002716:	685b      	ldreq	r3, [r3, #4]
 8002718:	1809      	addeq	r1, r1, r0
 800271a:	6021      	streq	r1, [r4, #0]
 800271c:	6063      	str	r3, [r4, #4]
 800271e:	6054      	str	r4, [r2, #4]
 8002720:	e7cb      	b.n	80026ba <_free_r+0x22>
 8002722:	bd38      	pop	{r3, r4, r5, pc}
 8002724:	20000094 	.word	0x20000094

08002728 <sbrk_aligned>:
 8002728:	b570      	push	{r4, r5, r6, lr}
 800272a:	4e0e      	ldr	r6, [pc, #56]	; (8002764 <sbrk_aligned+0x3c>)
 800272c:	460c      	mov	r4, r1
 800272e:	6831      	ldr	r1, [r6, #0]
 8002730:	4605      	mov	r5, r0
 8002732:	b911      	cbnz	r1, 800273a <sbrk_aligned+0x12>
 8002734:	f000 f8bc 	bl	80028b0 <_sbrk_r>
 8002738:	6030      	str	r0, [r6, #0]
 800273a:	4621      	mov	r1, r4
 800273c:	4628      	mov	r0, r5
 800273e:	f000 f8b7 	bl	80028b0 <_sbrk_r>
 8002742:	1c43      	adds	r3, r0, #1
 8002744:	d00a      	beq.n	800275c <sbrk_aligned+0x34>
 8002746:	1cc4      	adds	r4, r0, #3
 8002748:	f024 0403 	bic.w	r4, r4, #3
 800274c:	42a0      	cmp	r0, r4
 800274e:	d007      	beq.n	8002760 <sbrk_aligned+0x38>
 8002750:	1a21      	subs	r1, r4, r0
 8002752:	4628      	mov	r0, r5
 8002754:	f000 f8ac 	bl	80028b0 <_sbrk_r>
 8002758:	3001      	adds	r0, #1
 800275a:	d101      	bne.n	8002760 <sbrk_aligned+0x38>
 800275c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002760:	4620      	mov	r0, r4
 8002762:	bd70      	pop	{r4, r5, r6, pc}
 8002764:	20000098 	.word	0x20000098

08002768 <_malloc_r>:
 8002768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800276c:	1ccd      	adds	r5, r1, #3
 800276e:	f025 0503 	bic.w	r5, r5, #3
 8002772:	3508      	adds	r5, #8
 8002774:	2d0c      	cmp	r5, #12
 8002776:	bf38      	it	cc
 8002778:	250c      	movcc	r5, #12
 800277a:	2d00      	cmp	r5, #0
 800277c:	4607      	mov	r7, r0
 800277e:	db01      	blt.n	8002784 <_malloc_r+0x1c>
 8002780:	42a9      	cmp	r1, r5
 8002782:	d905      	bls.n	8002790 <_malloc_r+0x28>
 8002784:	230c      	movs	r3, #12
 8002786:	2600      	movs	r6, #0
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	4630      	mov	r0, r6
 800278c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002790:	4e2e      	ldr	r6, [pc, #184]	; (800284c <_malloc_r+0xe4>)
 8002792:	f000 f89d 	bl	80028d0 <__malloc_lock>
 8002796:	6833      	ldr	r3, [r6, #0]
 8002798:	461c      	mov	r4, r3
 800279a:	bb34      	cbnz	r4, 80027ea <_malloc_r+0x82>
 800279c:	4629      	mov	r1, r5
 800279e:	4638      	mov	r0, r7
 80027a0:	f7ff ffc2 	bl	8002728 <sbrk_aligned>
 80027a4:	1c43      	adds	r3, r0, #1
 80027a6:	4604      	mov	r4, r0
 80027a8:	d14d      	bne.n	8002846 <_malloc_r+0xde>
 80027aa:	6834      	ldr	r4, [r6, #0]
 80027ac:	4626      	mov	r6, r4
 80027ae:	2e00      	cmp	r6, #0
 80027b0:	d140      	bne.n	8002834 <_malloc_r+0xcc>
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	4631      	mov	r1, r6
 80027b6:	4638      	mov	r0, r7
 80027b8:	eb04 0803 	add.w	r8, r4, r3
 80027bc:	f000 f878 	bl	80028b0 <_sbrk_r>
 80027c0:	4580      	cmp	r8, r0
 80027c2:	d13a      	bne.n	800283a <_malloc_r+0xd2>
 80027c4:	6821      	ldr	r1, [r4, #0]
 80027c6:	3503      	adds	r5, #3
 80027c8:	1a6d      	subs	r5, r5, r1
 80027ca:	f025 0503 	bic.w	r5, r5, #3
 80027ce:	3508      	adds	r5, #8
 80027d0:	2d0c      	cmp	r5, #12
 80027d2:	bf38      	it	cc
 80027d4:	250c      	movcc	r5, #12
 80027d6:	4638      	mov	r0, r7
 80027d8:	4629      	mov	r1, r5
 80027da:	f7ff ffa5 	bl	8002728 <sbrk_aligned>
 80027de:	3001      	adds	r0, #1
 80027e0:	d02b      	beq.n	800283a <_malloc_r+0xd2>
 80027e2:	6823      	ldr	r3, [r4, #0]
 80027e4:	442b      	add	r3, r5
 80027e6:	6023      	str	r3, [r4, #0]
 80027e8:	e00e      	b.n	8002808 <_malloc_r+0xa0>
 80027ea:	6822      	ldr	r2, [r4, #0]
 80027ec:	1b52      	subs	r2, r2, r5
 80027ee:	d41e      	bmi.n	800282e <_malloc_r+0xc6>
 80027f0:	2a0b      	cmp	r2, #11
 80027f2:	d916      	bls.n	8002822 <_malloc_r+0xba>
 80027f4:	1961      	adds	r1, r4, r5
 80027f6:	42a3      	cmp	r3, r4
 80027f8:	6025      	str	r5, [r4, #0]
 80027fa:	bf18      	it	ne
 80027fc:	6059      	strne	r1, [r3, #4]
 80027fe:	6863      	ldr	r3, [r4, #4]
 8002800:	bf08      	it	eq
 8002802:	6031      	streq	r1, [r6, #0]
 8002804:	5162      	str	r2, [r4, r5]
 8002806:	604b      	str	r3, [r1, #4]
 8002808:	4638      	mov	r0, r7
 800280a:	f104 060b 	add.w	r6, r4, #11
 800280e:	f000 f865 	bl	80028dc <__malloc_unlock>
 8002812:	f026 0607 	bic.w	r6, r6, #7
 8002816:	1d23      	adds	r3, r4, #4
 8002818:	1af2      	subs	r2, r6, r3
 800281a:	d0b6      	beq.n	800278a <_malloc_r+0x22>
 800281c:	1b9b      	subs	r3, r3, r6
 800281e:	50a3      	str	r3, [r4, r2]
 8002820:	e7b3      	b.n	800278a <_malloc_r+0x22>
 8002822:	6862      	ldr	r2, [r4, #4]
 8002824:	42a3      	cmp	r3, r4
 8002826:	bf0c      	ite	eq
 8002828:	6032      	streq	r2, [r6, #0]
 800282a:	605a      	strne	r2, [r3, #4]
 800282c:	e7ec      	b.n	8002808 <_malloc_r+0xa0>
 800282e:	4623      	mov	r3, r4
 8002830:	6864      	ldr	r4, [r4, #4]
 8002832:	e7b2      	b.n	800279a <_malloc_r+0x32>
 8002834:	4634      	mov	r4, r6
 8002836:	6876      	ldr	r6, [r6, #4]
 8002838:	e7b9      	b.n	80027ae <_malloc_r+0x46>
 800283a:	230c      	movs	r3, #12
 800283c:	4638      	mov	r0, r7
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	f000 f84c 	bl	80028dc <__malloc_unlock>
 8002844:	e7a1      	b.n	800278a <_malloc_r+0x22>
 8002846:	6025      	str	r5, [r4, #0]
 8002848:	e7de      	b.n	8002808 <_malloc_r+0xa0>
 800284a:	bf00      	nop
 800284c:	20000094 	.word	0x20000094

08002850 <_realloc_r>:
 8002850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002854:	4680      	mov	r8, r0
 8002856:	4614      	mov	r4, r2
 8002858:	460e      	mov	r6, r1
 800285a:	b921      	cbnz	r1, 8002866 <_realloc_r+0x16>
 800285c:	4611      	mov	r1, r2
 800285e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002862:	f7ff bf81 	b.w	8002768 <_malloc_r>
 8002866:	b92a      	cbnz	r2, 8002874 <_realloc_r+0x24>
 8002868:	f7ff ff16 	bl	8002698 <_free_r>
 800286c:	4625      	mov	r5, r4
 800286e:	4628      	mov	r0, r5
 8002870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002874:	f000 f838 	bl	80028e8 <_malloc_usable_size_r>
 8002878:	4284      	cmp	r4, r0
 800287a:	4607      	mov	r7, r0
 800287c:	d802      	bhi.n	8002884 <_realloc_r+0x34>
 800287e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002882:	d812      	bhi.n	80028aa <_realloc_r+0x5a>
 8002884:	4621      	mov	r1, r4
 8002886:	4640      	mov	r0, r8
 8002888:	f7ff ff6e 	bl	8002768 <_malloc_r>
 800288c:	4605      	mov	r5, r0
 800288e:	2800      	cmp	r0, #0
 8002890:	d0ed      	beq.n	800286e <_realloc_r+0x1e>
 8002892:	42bc      	cmp	r4, r7
 8002894:	4622      	mov	r2, r4
 8002896:	4631      	mov	r1, r6
 8002898:	bf28      	it	cs
 800289a:	463a      	movcs	r2, r7
 800289c:	f7ff fed4 	bl	8002648 <memcpy>
 80028a0:	4631      	mov	r1, r6
 80028a2:	4640      	mov	r0, r8
 80028a4:	f7ff fef8 	bl	8002698 <_free_r>
 80028a8:	e7e1      	b.n	800286e <_realloc_r+0x1e>
 80028aa:	4635      	mov	r5, r6
 80028ac:	e7df      	b.n	800286e <_realloc_r+0x1e>
	...

080028b0 <_sbrk_r>:
 80028b0:	b538      	push	{r3, r4, r5, lr}
 80028b2:	2300      	movs	r3, #0
 80028b4:	4d05      	ldr	r5, [pc, #20]	; (80028cc <_sbrk_r+0x1c>)
 80028b6:	4604      	mov	r4, r0
 80028b8:	4608      	mov	r0, r1
 80028ba:	602b      	str	r3, [r5, #0]
 80028bc:	f7fe fc0a 	bl	80010d4 <_sbrk>
 80028c0:	1c43      	adds	r3, r0, #1
 80028c2:	d102      	bne.n	80028ca <_sbrk_r+0x1a>
 80028c4:	682b      	ldr	r3, [r5, #0]
 80028c6:	b103      	cbz	r3, 80028ca <_sbrk_r+0x1a>
 80028c8:	6023      	str	r3, [r4, #0]
 80028ca:	bd38      	pop	{r3, r4, r5, pc}
 80028cc:	2000009c 	.word	0x2000009c

080028d0 <__malloc_lock>:
 80028d0:	4801      	ldr	r0, [pc, #4]	; (80028d8 <__malloc_lock+0x8>)
 80028d2:	f000 b811 	b.w	80028f8 <__retarget_lock_acquire_recursive>
 80028d6:	bf00      	nop
 80028d8:	200000a0 	.word	0x200000a0

080028dc <__malloc_unlock>:
 80028dc:	4801      	ldr	r0, [pc, #4]	; (80028e4 <__malloc_unlock+0x8>)
 80028de:	f000 b80c 	b.w	80028fa <__retarget_lock_release_recursive>
 80028e2:	bf00      	nop
 80028e4:	200000a0 	.word	0x200000a0

080028e8 <_malloc_usable_size_r>:
 80028e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028ec:	1f18      	subs	r0, r3, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bfbc      	itt	lt
 80028f2:	580b      	ldrlt	r3, [r1, r0]
 80028f4:	18c0      	addlt	r0, r0, r3
 80028f6:	4770      	bx	lr

080028f8 <__retarget_lock_acquire_recursive>:
 80028f8:	4770      	bx	lr

080028fa <__retarget_lock_release_recursive>:
 80028fa:	4770      	bx	lr

080028fc <_init>:
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fe:	bf00      	nop
 8002900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002902:	bc08      	pop	{r3}
 8002904:	469e      	mov	lr, r3
 8002906:	4770      	bx	lr

08002908 <_fini>:
 8002908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290a:	bf00      	nop
 800290c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290e:	bc08      	pop	{r3}
 8002910:	469e      	mov	lr, r3
 8002912:	4770      	bx	lr
